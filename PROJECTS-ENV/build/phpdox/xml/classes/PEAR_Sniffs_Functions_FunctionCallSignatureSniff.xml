<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PEAR_Sniffs_Functions_FunctionCallSignatureSniff" namespace="" name="PEAR_Sniffs_Functions_FunctionCallSignatureSniff" abstract="false" final="false" start="28" end="505">
  <file path="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/PEAR/Sniffs/Functions" file="FunctionCallSignatureSniff.php" realpath="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionCallSignatureSniff.php" size="20989" time="2016-01-19T23:39:10+00:00" unixtime="1453246750" sha1="677a2efad26a632cf2078138df1d8f7cc2e197be" relative="freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/PEAR/Sniffs/Functions/FunctionCallSignatureSniff.php"/>
  <docblock>
    <description compact="PEAR_Sniffs_Functions_FunctionCallSignatureSniff."/>
    <category value="PHP"/>
    <package value="PHP_CodeSniffer"/>
    <author value="Greg Sherwood &lt;gsherwood@squiz.net&gt;"/>
    <author value="Marc McIntyre &lt;mmcintyre@squiz.net&gt;"/>
    <copyright value="2006-2014 Squiz Pty Ltd (ABN 77 084 670 600)"/>
    <license name="https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence"/>
    <version value="Release: @package_version@"/>
    <link value="http://pear.php.net/package/PHP_CodeSniffer"/>
  </docblock>
  <implements full="PHP_CodeSniffer_Sniff" namespace="" name="PHP_CodeSniffer_Sniff"/>
  <member name="supportedTokenizers" type="array" default="" visibility="public" static="false" line="36">
    <docblock>
      <description compact="A list of tokenizers this sniff supports."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="indent" type="integer" default="4" visibility="public" static="false" line="46">
    <docblock>
      <description compact="The number of spaces code should be indented."/>
      <var type="int"/>
    </docblock>
  </member>
  <member name="allowMultipleArguments" type="boolean" default="true" visibility="public" static="false" line="53">
    <docblock>
      <description compact="If TRUE, multiple arguments can be defined per line in a multi-line call."/>
      <var type="object">
        <type full="bool" namespace="" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="requiredSpacesAfterOpen" type="integer" default="0" visibility="public" static="false" line="60">
    <docblock>
      <description compact="How many spaces should follow the opening bracket."/>
      <var type="int"/>
    </docblock>
  </member>
  <member name="requiredSpacesBeforeClose" type="integer" default="0" visibility="public" static="false" line="67">
    <docblock>
      <description compact="How many spaces should precede the closing bracket."/>
      <var type="int"/>
    </docblock>
  </member>
  <method name="register" start="75" end="79" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of tokens this test wants to listen for."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="process" start="91" end="164" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this test, when one of its tokens is encountered."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Find the next non-empty token." line="97"/>
      <comment value="Find the previous non-empty token." line="110"/>
      <comment value="Check if this is a single line or multi-line function call." line="157"/>
    </inline>
  </method>
  <method name="isMultiLineCall" start="180" end="189" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes single-line calls."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <param description="The position of the opening bracket" type="int" variable="$openBracket">in the stack passed in $tokens.</param>
      <param description="The stack of tokens that make up" type="array" variable="$tokens">the file.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="openBracket" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="false" type="{unknown}"/>
  </method>
  <method name="processSingleLineCall" start="205" end="274" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes single-line calls."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <param description="The position of the opening bracket" type="int" variable="$openBracket">in the stack passed in $tokens.</param>
      <param description="The stack of tokens that make up" type="array" variable="$tokens">the file.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="openBracket" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="end if" line="241"/>
      <comment value="Checking this: $value = my_function(...[*])." line="243"/>
    </inline>
  </method>
  <method name="processMultiLineCall" start="290" end="502" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes multi-line calls."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <param description="The position of the opening bracket" type="int" variable="$openBracket">in the stack passed in $tokens.</param>
      <param description="The stack of tokens that make up" type="array" variable="$tokens">the file.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="openBracket" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="We need to work out how far indented the function" line="292"/>
      <comment value="call itself is, so we can work out how far to" line="293"/>
      <comment value="indent the arguments." line="294"/>
      <comment value="end foreach" line="326"/>
      <comment value="Each line between the parenthesis should be indented n spaces." line="355"/>
      <comment value="end for" line="500"/>
    </inline>
  </method>
</class>
