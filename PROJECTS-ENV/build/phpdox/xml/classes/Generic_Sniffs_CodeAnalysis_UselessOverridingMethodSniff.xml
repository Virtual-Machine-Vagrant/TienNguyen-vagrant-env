<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Generic_Sniffs_CodeAnalysis_UselessOverridingMethodSniff" namespace="" name="Generic_Sniffs_CodeAnalysis_UselessOverridingMethodSniff" abstract="false" final="false" start="39" end="178">
  <file path="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis" file="UselessOverridingMethodSniff.php" realpath="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UselessOverridingMethodSniff.php" size="5827" time="2016-01-19T23:39:10+00:00" unixtime="1453246750" sha1="c936a7a083bfe4a7f77c490084a58ae710a52494" relative="freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/UselessOverridingMethodSniff.php"/>
  <docblock>
    <description compact="Detects unnecessary overridden methods that simply call their parent.">This rule is based on the PMD rule catalog. The Useless Overriding Method
sniff detects the use of methods that only call their parent classes's method
with the same name and arguments. These methods are not required.

&lt;code&gt;
class FooBar {
  public function __construct($a, $b) {
    parent::__construct($a, $b);
  }
}
&lt;/code&gt;</description>
    <category value="PHP"/>
    <package value="PHP_CodeSniffer"/>
    <author value="Manuel Pichler &lt;mapi@manuel-pichler.de&gt;"/>
    <copyright value="2007-2014 Manuel Pichler. All rights reserved."/>
    <license name="http://www.opensource.org/licenses/bsd-license.php BSD License"/>
    <version value="Release: @package_version@"/>
    <link value="http://pear.php.net/package/PHP_CodeSniffer"/>
  </docblock>
  <implements full="PHP_CodeSniffer_Sniff" namespace="" name="PHP_CodeSniffer_Sniff"/>
  <method name="register" start="48" end="52" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Registers the tokens that this sniff wants to listen for."/>
      <return type="array" of="int"/>
    </docblock>
  </method>
  <method name="process" start="64" end="175" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this test, when one of its tokens is encountered."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Skip function without body." line="69"/>
      <comment value="Get function name." line="74"/>
      <comment value="Get all parameters from method signature." line="77"/>
      <comment value="Any token except 'parent' indicates correct code." line="98"/>
      <comment value="Find next non empty token index, should be double colon." line="103"/>
      <comment value="Skip for invalid code." line="106"/>
      <comment value="Find next non empty token index, should be the function name." line="111"/>
      <comment value="Skip for invalid code or other method." line="114"/>
      <comment value="Find next non empty token index, should be the open parenthesis." line="119"/>
      <comment value="Skip for invalid code." line="122"/>
      <comment value="end for" line="152"/>
      <comment value="Check rest of the scope." line="159"/>
    </inline>
  </method>
</class>
