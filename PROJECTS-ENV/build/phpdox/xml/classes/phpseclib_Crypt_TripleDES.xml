<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="phpseclib\Crypt\TripleDES" namespace="phpseclib\Crypt" name="TripleDES" abstract="false" final="false" start="46" end="460">
  <file path="/home/web/example/src/freegame_developer/vendor/phpseclib/phpseclib/phpseclib/Crypt" file="TripleDES.php" realpath="/home/web/example/src/freegame_developer/vendor/phpseclib/phpseclib/phpseclib/Crypt/TripleDES.php" size="13978" time="2016-10-04T00:57:04+00:00" unixtime="1475542624" sha1="a15130b568a6e86c9d3151d76351bd95534a583b" relative="freegame_developer/vendor/phpseclib/phpseclib/phpseclib/Crypt/TripleDES.php"/>
  <docblock>
    <description compact="Pure-PHP implementation of Triple DES."/>
    <package value="TripleDES"/>
    <author value="Jim Wigginton &lt;terrafrost@php.net&gt;"/>
    <access value="public"/>
  </docblock>
  <extends full="phpseclib\Crypt\DES" namespace="phpseclib\Crypt" name="DES"/>
  <constant type="integer" name="MODE_3CBC" value="2">
    <docblock>
      <description compact="Encrypt / decrypt using inner chaining">Inner chaining is used by SSH-1 and is generally considered to be less secure then outer chaining (self::MODE_CBC3).</description>
    </docblock>
  </constant>
  <constant type="{unknown}" name="MODE_CBC3" value="" constant="Base::MODE_CBC">
    <docblock>
      <description compact="Encrypt / decrypt using outer chaining">Outer chaining is used by SSH-2 and when the mode is set to \phpseclib\Crypt\Base::MODE_CBC.</description>
    </docblock>
  </constant>
  <member name="key_length" type="integer" default="24" visibility="public" static="false" line="69">
    <docblock>
      <description compact="Key Length (in bytes)"/>
      <see value="\phpseclib\Crypt\TripleDES::setKeyLength()"/>
      <var type="int"/>
      <access value="private"/>
    </docblock>
  </member>
  <member name="password_default_salt" type="string" default="'phpseclib'" visibility="public" static="false" line="79">
    <docblock>
      <description compact="The default salt used by setPassword()"/>
      <see value="\phpseclib\Crypt\Base::password_default_salt"/>
      <see value="\phpseclib\Crypt\Base::setPassword()"/>
      <var type="string"/>
      <access value="private"/>
    </docblock>
  </member>
  <member name="cipher_name_mcrypt" type="string" default="'tripledes'" visibility="public" static="false" line="89">
    <docblock>
      <description compact="The mcrypt specific name of the cipher"/>
      <see value="\phpseclib\Crypt\DES::cipher_name_mcrypt"/>
      <see value="\phpseclib\Crypt\Base::cipher_name_mcrypt"/>
      <var type="string"/>
      <access value="private"/>
    </docblock>
  </member>
  <member name="cfb_init_len" type="integer" default="750" visibility="public" static="false" line="98">
    <docblock>
      <description compact="Optimizing value while CFB-encrypting"/>
      <see value="\phpseclib\Crypt\Base::cfb_init_len"/>
      <var type="int"/>
      <access value="private"/>
    </docblock>
  </member>
  <member name="key_length_max" type="integer" default="24" visibility="public" static="false" line="108">
    <docblock>
      <description compact="max possible size of $key"/>
      <see value="self::setKey()"/>
      <see value="\phpseclib\Crypt\DES::setKey()"/>
      <var type="string"/>
      <access value="private"/>
    </docblock>
  </member>
  <member name="mode_3cbc" visibility="public" static="false" line="116">
    <docblock>
      <description compact="Internal flag whether using self::MODE_3CBC or not"/>
      <var type="object">
        <type full="phpseclib\Crypt\bool" namespace="phpseclib\Crypt" name="bool"/>
      </var>
      <access value="private"/>
    </docblock>
  </member>
  <member name="des" visibility="public" static="false" line="126">
    <docblock>
      <description compact="The \phpseclib\Crypt\DES objects">Used only if $mode_3cbc === true</description>
      <var type="array"/>
      <access value="private"/>
    </docblock>
  </member>
  <constructor name="__construct" start="154" end="179" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Default Constructor.">Determines whether or not the mcrypt extension should be used.

$mode could be:

- \phpseclib\Crypt\Base::MODE_ECB

- \phpseclib\Crypt\Base::MODE_CBC

- \phpseclib\Crypt\Base::MODE_CTR

- \phpseclib\Crypt\Base::MODE_CFB

- \phpseclib\Crypt\Base::MODE_OFB

- \phpseclib\Crypt\TripleDES::MODE_3CBC

If not explicitly set, \phpseclib\Crypt\Base::MODE_CBC will be used.</description>
      <see value="\phpseclib\Crypt\DES::__construct()"/>
      <see value="\phpseclib\Crypt\Base::__construct()"/>
      <param type="int" variable="$mode"/>
      <access value="public"/>
    </docblock>
    <parameter name="mode" byreference="false" type="{unknown}" default="" constant="Base::MODE_CBC"/>
  </constructor>
  <method name="isValidEngine" start="191" end="200" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test for engine validity">This is mainly just a wrapper to set things up for \phpseclib\Crypt\Base::isValidEngine()</description>
      <see value="\phpseclib\Crypt\Base::__construct()"/>
      <param type="int" variable="$engine"/>
      <access value="public"/>
      <return type="object">
        <type full="phpseclib\Crypt\bool" namespace="phpseclib\Crypt" name="bool"/>
      </return>
    </docblock>
    <parameter name="engine" byreference="false" type="{unknown}"/>
  </method>
  <method name="setIV" start="212" end="220" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the initialization vector. (optional)">SetIV is not required when \phpseclib\Crypt\Base::MODE_ECB is being used.  If not explicitly set, it'll be assumed
to be all zero's.</description>
      <see value="\phpseclib\Crypt\Base::setIV()"/>
      <access value="public"/>
      <param type="string" variable="$iv"/>
    </docblock>
    <parameter name="iv" byreference="false" type="{unknown}"/>
  </method>
  <method name="setKeyLength" start="231" end="246" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the key length.">Valid key lengths are 64, 128 and 192</description>
      <see value="\phpseclib\Crypt\Base:setKeyLength()"/>
      <access value="public"/>
      <param type="int" variable="$length"/>
    </docblock>
    <parameter name="length" byreference="false" type="{unknown}"/>
  </method>
  <method name="setKey" start="263" end="285" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the key.">Keys can be of any length.  Triple DES, itself, can use 128-bit (eg. strlen($key) == 16) or
192-bit (eg. strlen($key) == 24) keys.  This function pads and truncates $key as appropriate.

DES also requires that every eighth bit be a parity bit, however, we'll ignore that.

If the key is not explicitly set, it'll be assumed to be all null bytes.</description>
      <access value="public"/>
      <see value="\phpseclib\Crypt\DES::setKey()"/>
      <see value="\phpseclib\Crypt\Base::setKey()"/>
      <param type="string" variable="$key"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="And in case of self::MODE_3CBC:" line="276"/>
      <comment value="if key &lt;= 64bits we not need the 3 $des to work," line="277"/>
      <comment value="because we will then act as regular DES-CBC with just a &lt;= 64bit key." line="278"/>
      <comment value="So only if the key &gt; 64bits (&gt; 8 bytes) we will call setKey() for the 3 $des." line="279"/>
    </inline>
  </method>
  <method name="encrypt" start="295" end="312" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Encrypts a message."/>
      <see value="\phpseclib\Crypt\Base::encrypt()"/>
      <access value="public"/>
      <param type="string" variable="$plaintext"/>
      <return description="$cipertext" type="string"/>
    </docblock>
    <parameter name="plaintext" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="parent::en/decrypt() is able to do all the work for all modes and keylengths," line="297"/>
      <comment value="except for: self::MODE_3CBC (inner chaining CBC) with a key &gt; 64bits" line="298"/>
      <comment value="if the key is smaller then 8, do what we'd normally do" line="300"/>
    </inline>
  </method>
  <method name="decrypt" start="322" end="337" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Decrypts a message."/>
      <see value="\phpseclib\Crypt\Base::decrypt()"/>
      <access value="public"/>
      <param type="string" variable="$ciphertext"/>
      <return description="$plaintext" type="string"/>
    </docblock>
    <parameter name="ciphertext" byreference="false" type="{unknown}"/>
  </method>
  <method name="enableContinuousBuffer" start="377" end="385" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Treat consecutive &quot;packets&quot; as if they are a continuous buffer.">Say you have a 16-byte plaintext $plaintext.  Using the default behavior, the two following code snippets
will yield different outputs:

&lt;code&gt;
   echo $des-&gt;encrypt(substr($plaintext, 0, 8));
   echo $des-&gt;encrypt(substr($plaintext, 8, 8));
&lt;/code&gt;
&lt;code&gt;
   echo $des-&gt;encrypt($plaintext);
&lt;/code&gt;

The solution is to enable the continuous buffer.  Although this will resolve the above discrepancy, it creates
another, as demonstrated with the following:

&lt;code&gt;
   $des-&gt;encrypt(substr($plaintext, 0, 8));
   echo $des-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 8, 8)));
&lt;/code&gt;
&lt;code&gt;
   echo $des-&gt;decrypt($des-&gt;encrypt(substr($plaintext, 8, 8)));
&lt;/code&gt;

With the continuous buffer disabled, these would yield the same output.  With it enabled, they yield different
outputs.  The reason is due to the fact that the initialization vector's change after every encryption /
decryption round when the continuous buffer is enabled.  When it's disabled, they remain constant.

Put another way, when the continuous buffer is enabled, the state of the \phpseclib\Crypt\DES() object changes after each
encryption / decryption round, whereas otherwise, it'd remain constant.  For this reason, it's recommended that
continuous buffers not be used.  They do offer better security and are, in fact, sometimes required (SSH uses them),
however, they are also less intuitive and more likely to cause you problems.</description>
      <see value="\phpseclib\Crypt\Base::enableContinuousBuffer()"/>
      <see value="self::disableContinuousBuffer()"/>
      <access value="public"/>
    </docblock>
  </method>
  <method name="disableContinuousBuffer" start="396" end="404" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Treat consecutive packets as if they are a discontinuous buffer.">The default behavior.</description>
      <see value="\phpseclib\Crypt\Base::disableContinuousBuffer()"/>
      <see value="self::enableContinuousBuffer()"/>
      <access value="public"/>
    </docblock>
  </method>
  <method name="_setupKey" start="413" end="439" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates the key schedule"/>
      <see value="\phpseclib\Crypt\DES::_setupKey()"/>
      <see value="\phpseclib\Crypt\Base::_setupKey()"/>
      <access value="private"/>
    </docblock>
    <inline>
      <comment value="setup our key" line="437"/>
    </inline>
  </method>
  <method name="setPreferredEngine" start="450" end="459" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the internal crypt engine"/>
      <see value="\phpseclib\Crypt\Base::__construct()"/>
      <see value="\phpseclib\Crypt\Base::setPreferredEngine()"/>
      <param type="int" variable="$engine"/>
      <access value="public"/>
      <return type="int"/>
    </docblock>
    <parameter name="engine" byreference="false" type="{unknown}"/>
  </method>
</class>
