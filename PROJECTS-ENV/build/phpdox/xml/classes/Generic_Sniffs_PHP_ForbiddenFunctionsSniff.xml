<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Generic_Sniffs_PHP_ForbiddenFunctionsSniff" namespace="" name="Generic_Sniffs_PHP_ForbiddenFunctionsSniff" abstract="false" final="false" start="31" end="240">
  <file path="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/PHP" file="ForbiddenFunctionsSniff.php" realpath="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/PHP/ForbiddenFunctionsSniff.php" size="7612" time="2016-01-19T23:39:10+00:00" unixtime="1453246750" sha1="af532b79f309bc2146040d2b8fe616fa48641d6c" relative="freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/PHP/ForbiddenFunctionsSniff.php"/>
  <docblock>
    <description compact="Generic_Sniffs_PHP_ForbiddenFunctionsSniff.">Discourages the use of alias functions that are kept in PHP for compatibility
with older versions. Can be used to forbid the use of any function.</description>
    <category value="PHP"/>
    <package value="PHP_CodeSniffer"/>
    <author value="Greg Sherwood &lt;gsherwood@squiz.net&gt;"/>
    <author value="Marc McIntyre &lt;mmcintyre@squiz.net&gt;"/>
    <copyright value="2006-2014 Squiz Pty Ltd (ABN 77 084 670 600)"/>
    <license name="https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence"/>
    <version value="Release: @package_version@"/>
    <link value="http://pear.php.net/package/PHP_CodeSniffer"/>
  </docblock>
  <implements full="PHP_CodeSniffer_Sniff" namespace="" name="PHP_CodeSniffer_Sniff"/>
  <member name="forbiddenFunctions" type="array" default="" visibility="public" static="false" line="42">
    <docblock>
      <description compact="A list of forbidden functions with their alternatives.">The value is NULL if no alternative exists. IE, the
function should just not be used.</description>
      <var description="=&gt; string|null)" type="object">
        <type full="array(string" namespace="" name="array(string"/>
      </var>
    </docblock>
  </member>
  <member name="forbiddenFunctionNames" type="array" default="" visibility="protected" static="false" line="52">
    <docblock>
      <description compact="A cache of forbidden function names, for faster lookups."/>
      <var type="object">
        <type full="array(string)" namespace="" name="array(string)"/>
      </var>
    </docblock>
  </member>
  <member name="patternMatch" type="boolean" default="false" visibility="protected" static="false" line="59">
    <docblock>
      <description compact="If true, forbidden functions will be considered regular expressions."/>
      <var type="object">
        <type full="bool" namespace="" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="error" type="boolean" default="true" visibility="public" static="false" line="66">
    <docblock>
      <description compact="If true, an error will be thrown; otherwise a warning."/>
      <var type="object">
        <type full="bool" namespace="" name="bool"/>
      </var>
    </docblock>
  </member>
  <method name="register" start="74" end="107" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of tokens this test wants to listen for."/>
      <return type="array"/>
    </docblock>
    <inline>
      <comment value="Everyone has had a chance to figure out what forbidden functions" line="76"/>
      <comment value="they want to check for, so now we can cache out the list." line="77"/>
      <comment value="If we are not pattern matching, we need to work out what" line="88"/>
      <comment value="tokens to listen for." line="89"/>
    </inline>
  </method>
  <method name="process" start="119" end="193" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this test, when one of its tokens is encountered."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token in" type="int" variable="$stackPtr">the stack passed in $tokens.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If function call is directly preceded by a NS_SEPARATOR it points to the" line="140"/>
      <comment value="global namespace, so we should still catch it." line="141"/>
      <comment value="end if" line="189"/>
    </inline>
  </method>
  <method name="addError" start="207" end="237" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Generates the error or warning for this sniff."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the forbidden function" type="int" variable="$stackPtr">in the token array.</param>
      <param description="The name of the forbidden function." type="string" variable="$function"/>
      <param description="The pattern used for the match." type="string" variable="$pattern"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="{unknown}"/>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="function" byreference="false" type="{unknown}"/>
    <parameter name="pattern" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
</class>
