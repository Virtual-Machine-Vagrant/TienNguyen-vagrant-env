<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PEAR_Sniffs_NamingConventions_ValidFunctionNameSniff" namespace="" name="PEAR_Sniffs_NamingConventions_ValidFunctionNameSniff" abstract="false" final="false" start="35" end="298">
  <file path="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions" file="ValidFunctionNameSniff.php" realpath="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidFunctionNameSniff.php" size="11361" time="2016-01-19T23:39:10+00:00" unixtime="1453246750" sha1="682a1830f55759a002e9c0dd93e44f22635c4d5f" relative="freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidFunctionNameSniff.php"/>
  <docblock>
    <description compact="PEAR_Sniffs_NamingConventions_ValidFunctionNameSniff.">Ensures method names are correct depending on whether they are public
or private, and that functions are named correctly.</description>
    <category value="PHP"/>
    <package value="PHP_CodeSniffer"/>
    <author value="Greg Sherwood &lt;gsherwood@squiz.net&gt;"/>
    <author value="Marc McIntyre &lt;mmcintyre@squiz.net&gt;"/>
    <copyright value="2006-2014 Squiz Pty Ltd (ABN 77 084 670 600)"/>
    <license name="https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence"/>
    <version value="Release: @package_version@"/>
    <link value="http://pear.php.net/package/PHP_CodeSniffer"/>
  </docblock>
  <extends full="PHP_CodeSniffer_Standards_AbstractScopeSniff" namespace="" name="PHP_CodeSniffer_Standards_AbstractScopeSniff"/>
  <member name="magicMethods" type="array" default="" visibility="protected" static="false" line="43">
    <docblock>
      <description compact="A list of all PHP magic methods."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="magicFunctions" type="array" default="" visibility="protected" static="false" line="66">
    <docblock>
      <description compact="A list of all PHP magic functions."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="72" end="76" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructs a PEAR_Sniffs_NamingConventions_ValidFunctionNameSniff."/>
    </docblock>
  </constructor>
  <method name="processTokenWithinScope" start="89" end="180" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Processes the tokens within the scope."/>
      <param description="The file being processed." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position where this token was" type="int" variable="$stackPtr">found.</param>
      <param description="The position of the current scope." type="int" variable="$currScope"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <parameter name="currScope" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Is this a magic method. i.e., is prefixed with &quot;__&quot; ?" line="100"/>
      <comment value="PHP4 constructors are allowed to break our rules." line="111"/>
      <comment value="PHP4 destructors are allowed to break our rules." line="116"/>
      <comment value="If it's a private method, it must have an underscore on the front." line="131"/>
      <comment value="If it's not a private method, it must not have an underscore on the front." line="143"/>
      <comment value="If the scope was specified on the method, then the method must be" line="154"/>
      <comment value="camel caps and an underscore should be checked for. If it wasn't" line="155"/>
      <comment value="specified, treat it like a public method and remove the underscore" line="156"/>
      <comment value="prefix if there is one because we cant determine if it is private or" line="157"/>
      <comment value="public." line="158"/>
    </inline>
  </method>
  <method name="processTokenOutsideScope" start="192" end="295" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Processes the tokens outside the scope."/>
      <param description="The file being processed." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position where this token was" type="int" variable="$stackPtr">found.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Is this a magic function. i.e., it is prefixed with &quot;__&quot;." line="207"/>
      <comment value="Function names can be in two parts; the package name and" line="218"/>
      <comment value="the function name." line="219"/>
      <comment value="If it has a package part, make sure the first letter is a capital." line="233"/>
      <comment value="If it doesn't have a camel caps part, it's not valid." line="248"/>
      <comment value="Every function must have a camel caps part, so check that first." line="259"/>
    </inline>
  </method>
</class>
