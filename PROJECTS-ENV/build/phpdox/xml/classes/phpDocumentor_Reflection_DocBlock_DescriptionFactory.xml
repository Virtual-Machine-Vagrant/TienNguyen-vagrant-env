<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="phpDocumentor\Reflection\DocBlock\DescriptionFactory" namespace="phpDocumentor\Reflection\DocBlock" name="DescriptionFactory" abstract="false" final="false" start="34" end="192">
  <file path="/home/web/example/src/freegame_developer/vendor/phpdocumentor/reflection-docblock/src/DocBlock" file="DescriptionFactory.php" realpath="/home/web/example/src/freegame_developer/vendor/phpdocumentor/reflection-docblock/src/DocBlock/DescriptionFactory.php" size="7025" time="2016-09-30T07:12:33+00:00" unixtime="1475219553" sha1="6c0d3338d2d4a7af7dfbbb6c3bb5f92dc835f81d" relative="freegame_developer/vendor/phpdocumentor/reflection-docblock/src/DocBlock/DescriptionFactory.php"/>
  <docblock>
    <description compact="Creates a new Description object given a body of text.">Descriptions in phpDocumentor are somewhat complex entities as they can contain one or more tags inside their
body that can be replaced with a readable output. The replacing is done by passing a Formatter object to the
Description object's `render` method.
In addition to the above does a Description support two types of escape sequences:
1. `<invalid xmlns="http://xml.phpdox.net/src" annotation="}`" value="to escape the `@` character to prevent it from being interpreted as part of a tag, i.e. `{{@}link"/>`
2. `{}` to escape the `}` character, this can be used if you want to use the `}` character in the description
   of an inline tag.
If a body consists of multiple lines then this factory will also remove any superfluous whitespace at the beginning
of each line while maintaining any indentation that is used. This will prevent formatting parsers from tripping
over unexpected spaces as can be observed with tag descriptions.
</description>
  </docblock>
  <member name="tagFactory" visibility="private" static="false" line="37">
    <docblock>
      <var type="object">
        <type full="phpDocumentor\Reflection\DocBlock\TagFactory" namespace="phpDocumentor\Reflection\DocBlock" name="TagFactory"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="44" end="47" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Initializes this factory with the means to construct (inline) tags."/>
      <param type="object" variable="$tagFactory">
        <type full="phpDocumentor\Reflection\DocBlock\TagFactory" namespace="phpDocumentor\Reflection\DocBlock" name="TagFactory"/>
      </param>
    </docblock>
    <parameter name="tagFactory" byreference="false" type="object">
      <type full="phpDocumentor\Reflection\DocBlock\TagFactory" namespace="phpDocumentor\Reflection\DocBlock" name="TagFactory"/>
    </parameter>
  </constructor>
  <method name="create" start="57" end="62" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the parsed text of this description."/>
      <param type="string" variable="$contents"/>
      <param type="object" variable="$context">
        <type full="phpDocumentor\Reflection\Types\Context" namespace="phpDocumentor\Reflection\Types" name="Context"/>
      </param>
      <return type="object">
        <type full="phpDocumentor\Reflection\DocBlock\Description" namespace="phpDocumentor\Reflection\DocBlock" name="Description"/>
      </return>
    </docblock>
    <parameter name="contents" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="{unknown}" default="" constant="null">
      <type full="phpDocumentor\Reflection\Types\Context" namespace="phpDocumentor\Reflection\Types" name="Context"/>
    </parameter>
  </method>
  <method name="lex" start="71" end="109" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Strips the contents from superfluous whitespace and splits the description into a series of tokens."/>
      <param type="string" variable="$contents"/>
      <return description="A series of tokens of which the description text is composed." type="array" of="object">
        <type full="phpDocumentor\Reflection\DocBlock\string" namespace="phpDocumentor\Reflection\DocBlock" name="string"/>
      </return>
    </docblock>
    <parameter name="contents" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="performance optimalization; if there is no inline tag, don't bother splitting it up." line="75"/>
    </inline>
  </method>
  <method name="parse" start="119" end="139" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Parses the stream of tokens in to a new set of tokens containing Tags."/>
      <param type="array" variable="$tokens" of="object">
        <type full="phpDocumentor\Reflection\DocBlock\string" namespace="phpDocumentor\Reflection\DocBlock" name="string"/>
      </param>
      <param type="object" variable="$context">
        <type full="phpDocumentor\Reflection\Types\Context" namespace="phpDocumentor\Reflection\Types" name="Context"/>
      </param>
      <return type="array" of="object">
        <type full="phpDocumentor\Reflection\DocBlock\string[]|Tag" namespace="phpDocumentor\Reflection\DocBlock" name="string[]|Tag"/>
      </return>
    </docblock>
    <parameter name="tokens" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="object">
      <type full="phpDocumentor\Reflection\Types\Context" namespace="phpDocumentor\Reflection\Types" name="Context"/>
    </parameter>
    <inline>
      <comment value="In order to allow &quot;literal&quot; inline tags, the otherwise invalid" line="130"/>
      <comment value="sequence &quot;{@}&quot; is changed to &quot;@&quot;, and &quot;{}&quot; is changed to &quot;}&quot;." line="131"/>
      <comment value="&quot;%&quot; is escaped to &quot;%%&quot; because of vsprintf." line="132"/>
      <comment value="See unit tests for examples." line="133"/>
    </inline>
  </method>
  <method name="removeSuperfluousStartingWhitespace" start="159" end="190" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Removes the superfluous from a multi-line description.">When a description has more than one line then it can happen that the second and subsequent lines have an
additional indentation. This is commonly in use with tags like this:
    {since 1.1.0 This is an example
        description where we have an
        indentation in the second and
        subsequent lines.
If we do not normalize the indentation then we have superfluous whitespace on the second and subsequent
lines and this may cause rendering issues when, for example, using a Markdown converter.
</description>
      <param type="string" variable="$contents"/>
      <return type="string"/>
    </docblock>
    <parameter name="contents" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="if there is only one line then we don't have lines with superfluous whitespace and" line="163"/>
      <comment value="can use the contents as-is" line="164"/>
      <comment value="determine how many whitespace characters need to be stripped" line="169"/>
      <comment value="strip the number of spaces from each line" line="182"/>
    </inline>
  </method>
</class>
