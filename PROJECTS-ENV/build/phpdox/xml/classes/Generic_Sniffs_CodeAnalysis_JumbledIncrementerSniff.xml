<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Generic_Sniffs_CodeAnalysis_JumbledIncrementerSniff" namespace="" name="Generic_Sniffs_CodeAnalysis_JumbledIncrementerSniff" abstract="false" final="false" start="47" end="146">
  <file path="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis" file="JumbledIncrementerSniff.php" realpath="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/JumbledIncrementerSniff.php" size="4216" time="2016-01-19T23:39:10+00:00" unixtime="1453246750" sha1="1892eb7cd13a1d8628ae7e42262d80fef0c1ff9a" relative="freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/JumbledIncrementerSniff.php"/>
  <docblock>
    <description compact="Detects incrementer jumbling in for loops.">This rule is based on the PMD rule catalog. The jumbling incrementer sniff
detects the usage of one and the same incrementer into an outer and an inner
loop. Even it is intended this is confusing code.

&lt;code&gt;
class Foo
{
    public function bar($x)
    {
        for ($i = 0; $i &lt; 10; $i++)
        {
            for ($k = 0; $k &lt; 20; $i++)
            {
                echo 'Hello';
            }
        }
    }
}
&lt;/code&gt;</description>
    <category value="PHP"/>
    <package value="PHP_CodeSniffer"/>
    <author value="Manuel Pichler &lt;mapi@manuel-pichler.de&gt;"/>
    <copyright value="2007-2014 Manuel Pichler. All rights reserved."/>
    <license name="http://www.opensource.org/licenses/bsd-license.php BSD License"/>
    <version value="Release: @package_version@"/>
    <link value="http://pear.php.net/package/PHP_CodeSniffer"/>
  </docblock>
  <implements full="PHP_CodeSniffer_Sniff" namespace="" name="PHP_CodeSniffer_Sniff"/>
  <method name="register" start="56" end="60" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Registers the tokens that this sniff wants to listen for."/>
      <return type="array" of="int"/>
    </docblock>
  </method>
  <method name="process" start="72" end="109" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this test, when one of its tokens is encountered."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Skip for-loop without body." line="77"/>
      <comment value="Find incrementors for outer loop." line="82"/>
      <comment value="Skip if empty." line="85"/>
      <comment value="Find nested for loops." line="90"/>
    </inline>
  </method>
  <method name="findIncrementers" start="120" end="143" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get all used variables in the incrementer part of a for statement."/>
      <param description="Array with all code sniffer tokens." type="object" variable="$tokens">
        <type full="array(integer=&gt;array)" namespace="" name="array(integer=&gt;array)"/>
      </param>
      <param description="Current for loop token" type="object" variable="$token">
        <type full="array(string=&gt;mixed)" namespace="" name="array(string=&gt;mixed)"/>
      </param>
      <return description="List of all found incrementer variables." type="array" of="string"/>
    </docblock>
    <parameter name="tokens" byreference="false" type="array"/>
    <parameter name="token" byreference="false" type="array"/>
    <inline>
      <comment value="Skip invalid statement." line="122"/>
    </inline>
  </method>
</class>
