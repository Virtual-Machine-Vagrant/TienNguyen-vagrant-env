<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpFoundation\Request" namespace="Symfony\Component\HttpFoundation" name="Request" abstract="false" final="false" start="30" end="1968">
  <file path="/home/web/example/src/freegame_developer/vendor/symfony/http-foundation" file="Request.php" realpath="/home/web/example/src/freegame_developer/vendor/symfony/http-foundation/Request.php" size="63275" time="2016-10-24T14:36:35+00:00" unixtime="1477319795" sha1="3c1fe023b57dc1e6d4541d1a7357fe4520f1a5d7" relative="freegame_developer/vendor/symfony/http-foundation/Request.php"/>
  <docblock>
    <description compact="Request represents an HTTP request.">The methods dealing with URL accept / return a raw path (% encoded):
  * getBasePath
  * getBaseUrl
  * getPathInfo
  * getRequestUri
  * getUri
  * getUriForPath</description>
    <author value="Fabien Potencier &lt;fabien@symfony.com&gt;"/>
  </docblock>
  <constant type="string" name="HEADER_FORWARDED" value="'forwarded'"/>
  <constant type="string" name="HEADER_CLIENT_IP" value="'client_ip'"/>
  <constant type="string" name="HEADER_CLIENT_HOST" value="'client_host'"/>
  <constant type="string" name="HEADER_CLIENT_PROTO" value="'client_proto'"/>
  <constant type="string" name="HEADER_CLIENT_PORT" value="'client_port'"/>
  <constant type="string" name="METHOD_HEAD" value="'HEAD'"/>
  <constant type="string" name="METHOD_GET" value="'GET'"/>
  <constant type="string" name="METHOD_POST" value="'POST'"/>
  <constant type="string" name="METHOD_PUT" value="'PUT'"/>
  <constant type="string" name="METHOD_PATCH" value="'PATCH'"/>
  <constant type="string" name="METHOD_DELETE" value="'DELETE'"/>
  <constant type="string" name="METHOD_PURGE" value="'PURGE'"/>
  <constant type="string" name="METHOD_OPTIONS" value="'OPTIONS'"/>
  <constant type="string" name="METHOD_TRACE" value="'TRACE'"/>
  <constant type="string" name="METHOD_CONNECT" value="'CONNECT'"/>
  <member name="trustedProxies" type="array" default="" visibility="protected" static="true" line="52">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Symfony\Component\HttpFoundation\string" namespace="Symfony\Component\HttpFoundation" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="trustedHostPatterns" type="array" default="" visibility="protected" static="true" line="57">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Symfony\Component\HttpFoundation\string" namespace="Symfony\Component\HttpFoundation" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="trustedHosts" type="array" default="" visibility="protected" static="true" line="62">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Symfony\Component\HttpFoundation\string" namespace="Symfony\Component\HttpFoundation" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="trustedHeaders" type="array" default="" visibility="protected" static="true" line="73">
    <docblock>
      <description compact="Names for headers that can be trusted when using trusted proxies.">The FORWARDED header is the standard as of rfc7239.

The other headers are non-standard, but widely used
by popular reverse proxies (like Apache mod_proxy or Amazon EC2).</description>
    </docblock>
  </member>
  <member name="httpMethodParameterOverride" type="boolean" default="false" visibility="protected" static="true" line="81"/>
  <member name="attributes" visibility="public" static="false" line="88">
    <docblock>
      <description compact="Custom parameters."/>
      <var type="object">
        <type full="\Symfony\Component\HttpFoundation\ParameterBag" namespace="\Symfony\Component\HttpFoundation" name="ParameterBag"/>
      </var>
    </docblock>
  </member>
  <member name="request" visibility="public" static="false" line="95">
    <docblock>
      <description compact="Request body parameters ($_POST)."/>
      <var type="object">
        <type full="\Symfony\Component\HttpFoundation\ParameterBag" namespace="\Symfony\Component\HttpFoundation" name="ParameterBag"/>
      </var>
    </docblock>
  </member>
  <member name="query" visibility="public" static="false" line="102">
    <docblock>
      <description compact="Query string parameters ($_GET)."/>
      <var type="object">
        <type full="\Symfony\Component\HttpFoundation\ParameterBag" namespace="\Symfony\Component\HttpFoundation" name="ParameterBag"/>
      </var>
    </docblock>
  </member>
  <member name="server" visibility="public" static="false" line="109">
    <docblock>
      <description compact="Server and execution environment parameters ($_SERVER)."/>
      <var type="object">
        <type full="\Symfony\Component\HttpFoundation\ServerBag" namespace="\Symfony\Component\HttpFoundation" name="ServerBag"/>
      </var>
    </docblock>
  </member>
  <member name="files" visibility="public" static="false" line="116">
    <docblock>
      <description compact="Uploaded files ($_FILES)."/>
      <var type="object">
        <type full="\Symfony\Component\HttpFoundation\FileBag" namespace="\Symfony\Component\HttpFoundation" name="FileBag"/>
      </var>
    </docblock>
  </member>
  <member name="cookies" visibility="public" static="false" line="123">
    <docblock>
      <description compact="Cookies ($_COOKIE)."/>
      <var type="object">
        <type full="\Symfony\Component\HttpFoundation\ParameterBag" namespace="\Symfony\Component\HttpFoundation" name="ParameterBag"/>
      </var>
    </docblock>
  </member>
  <member name="headers" visibility="public" static="false" line="130">
    <docblock>
      <description compact="Headers (taken from the $_SERVER)."/>
      <var type="object">
        <type full="\Symfony\Component\HttpFoundation\HeaderBag" namespace="\Symfony\Component\HttpFoundation" name="HeaderBag"/>
      </var>
    </docblock>
  </member>
  <member name="content" visibility="protected" static="false" line="135">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="languages" visibility="protected" static="false" line="140">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="charsets" visibility="protected" static="false" line="145">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="encodings" visibility="protected" static="false" line="150">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="acceptableContentTypes" visibility="protected" static="false" line="155">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="pathInfo" visibility="protected" static="false" line="160">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="requestUri" visibility="protected" static="false" line="165">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="baseUrl" visibility="protected" static="false" line="170">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="basePath" visibility="protected" static="false" line="175">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="method" visibility="protected" static="false" line="180">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="format" visibility="protected" static="false" line="185">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="session" visibility="protected" static="false" line="190">
    <docblock>
      <description/>
      <var type="object">
        <type full="\Symfony\Component\HttpFoundation\Session\SessionInterface" namespace="\Symfony\Component\HttpFoundation\Session" name="SessionInterface"/>
      </var>
    </docblock>
  </member>
  <member name="locale" visibility="protected" static="false" line="195">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="defaultLocale" type="string" default="'en'" visibility="protected" static="false" line="200">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="formats" visibility="protected" static="true" line="205">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="requestFactory" visibility="protected" static="true" line="207"/>
  <constructor name="__construct" start="220" end="223" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor."/>
      <param description="The GET parameters" type="array" variable="$query"/>
      <param description="The POST parameters" type="array" variable="$request"/>
      <param description="The request attributes (parameters parsed from the PATH_INFO, ...)" type="array" variable="$attributes"/>
      <param description="The COOKIE parameters" type="array" variable="$cookies"/>
      <param description="The FILES parameters" type="array" variable="$files"/>
      <param description="The SERVER parameters" type="array" variable="$server"/>
      <param description="The raw body data" type="object" variable="$content">
        <type full="Symfony\Component\HttpFoundation\string|resource" namespace="Symfony\Component\HttpFoundation" name="string|resource"/>
      </param>
    </docblock>
    <parameter name="query" byreference="false" type="array" default=""/>
    <parameter name="request" byreference="false" type="array" default=""/>
    <parameter name="attributes" byreference="false" type="array" default=""/>
    <parameter name="cookies" byreference="false" type="array" default=""/>
    <parameter name="files" byreference="false" type="array" default=""/>
    <parameter name="server" byreference="false" type="array" default=""/>
    <parameter name="content" byreference="false" type="{unknown}" default="" constant="null"/>
  </constructor>
  <method name="initialize" start="238" end="259" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the parameters for this request.">This method also re-initializes all properties.</description>
      <param description="The GET parameters" type="array" variable="$query"/>
      <param description="The POST parameters" type="array" variable="$request"/>
      <param description="The request attributes (parameters parsed from the PATH_INFO, ...)" type="array" variable="$attributes"/>
      <param description="The COOKIE parameters" type="array" variable="$cookies"/>
      <param description="The FILES parameters" type="array" variable="$files"/>
      <param description="The SERVER parameters" type="array" variable="$server"/>
      <param description="The raw body data" type="object" variable="$content">
        <type full="Symfony\Component\HttpFoundation\string|resource" namespace="Symfony\Component\HttpFoundation" name="string|resource"/>
      </param>
    </docblock>
    <parameter name="query" byreference="false" type="array" default=""/>
    <parameter name="request" byreference="false" type="array" default=""/>
    <parameter name="attributes" byreference="false" type="array" default=""/>
    <parameter name="cookies" byreference="false" type="array" default=""/>
    <parameter name="files" byreference="false" type="array" default=""/>
    <parameter name="server" byreference="false" type="array" default=""/>
    <parameter name="content" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="createFromGlobals" start="266" end="291" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Creates a new request with values from PHP's super globals."/>
      <return description="A new request" type="object">
        <type full="Symfony\Component\HttpFoundation\Request" namespace="Symfony\Component\HttpFoundation" name="Request"/>
      </return>
    </docblock>
    <inline>
      <comment value="With the php's bug #66606, the php's built-in web server" line="268"/>
      <comment value="stores the Content-Type and Content-Length header values in" line="269"/>
      <comment value="HTTP_CONTENT_TYPE and HTTP_CONTENT_LENGTH fields." line="270"/>
    </inline>
  </method>
  <method name="create" start="309" end="399" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Creates a Request based on a given URI and configuration.">The information contained in the URI always take precedence
over the other information (server and parameters).</description>
      <param description="The URI" type="string" variable="$uri"/>
      <param description="The HTTP method" type="string" variable="$method"/>
      <param description="The query (GET) or request (POST) parameters" type="array" variable="$parameters"/>
      <param description="The request cookies ($_COOKIE)" type="array" variable="$cookies"/>
      <param description="The request files ($_FILES)" type="array" variable="$files"/>
      <param description="The server parameters ($_SERVER)" type="array" variable="$server"/>
      <param description="The raw body data" type="string" variable="$content"/>
      <return description="A Request instance" type="object">
        <type full="Symfony\Component\HttpFoundation\Request" namespace="Symfony\Component\HttpFoundation" name="Request"/>
      </return>
    </docblock>
    <parameter name="uri" byreference="false" type="{unknown}"/>
    <parameter name="method" byreference="false" type="string" default="'GET'"/>
    <parameter name="parameters" byreference="false" type="array" default=""/>
    <parameter name="cookies" byreference="false" type="array" default=""/>
    <parameter name="files" byreference="false" type="array" default=""/>
    <parameter name="server" byreference="false" type="array" default=""/>
    <parameter name="content" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="setFactory" start="410" end="413" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Sets a callable able to create a Request instance.">This is mainly useful when you need to override the Request class
to keep BC with an existing system. It should not be used for any
other purpose.</description>
      <param description="A PHP callable" type="object" variable="$callable">
        <type full="Symfony\Component\HttpFoundation\callable|null" namespace="Symfony\Component\HttpFoundation" name="callable|null"/>
      </param>
    </docblock>
    <parameter name="callable" byreference="false" type="{unknown}"/>
  </method>
  <method name="duplicate" start="427" end="469" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clones a request and overrides some of its parameters."/>
      <param description="The GET parameters" type="array" variable="$query"/>
      <param description="The POST parameters" type="array" variable="$request"/>
      <param description="The request attributes (parameters parsed from the PATH_INFO, ...)" type="array" variable="$attributes"/>
      <param description="The COOKIE parameters" type="array" variable="$cookies"/>
      <param description="The FILES parameters" type="array" variable="$files"/>
      <param description="The SERVER parameters" type="array" variable="$server"/>
      <return description="The duplicated request" type="object">
        <type full="Symfony\Component\HttpFoundation\Request" namespace="Symfony\Component\HttpFoundation" name="Request"/>
      </return>
    </docblock>
    <parameter name="query" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="request" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="attributes" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="cookies" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="files" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="server" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="__clone" start="477" end="486" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clones the current request.">Note that the session is not cloned as duplicated requests
are most of the time sub-requests of the main one.</description>
    </docblock>
  </method>
  <method name="__toString" start="493" end="505" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the request as a string."/>
      <return description="The request" type="string"/>
    </docblock>
  </method>
  <method name="overrideGlobals" start="513" end="540" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Overrides the PHP global variables according to this request instance.">It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.
$_FILES is never overridden, see rfc1867</description>
    </docblock>
  </method>
  <method name="setTrustedProxies" start="549" end="552" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Sets a list of trusted proxies.">You should only list the reverse proxies that you manage directly.</description>
      <param description="A list of trusted proxies" type="array" variable="$proxies"/>
    </docblock>
    <parameter name="proxies" byreference="false" type="array"/>
  </method>
  <method name="getTrustedProxies" start="559" end="562" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Gets the list of trusted proxies."/>
      <return description="An array of trusted proxies" type="array"/>
    </docblock>
  </method>
  <method name="setTrustedHosts" start="571" end="578" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Sets a list of trusted host patterns.">You should only list the hosts you manage using regexs.</description>
      <param description="A list of trusted host patterns" type="array" variable="$hostPatterns"/>
    </docblock>
    <parameter name="hostPatterns" byreference="false" type="array"/>
    <inline>
      <comment value="we need to reset trusted hosts on trusted host patterns change" line="576"/>
    </inline>
  </method>
  <method name="getTrustedHosts" start="585" end="588" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Gets the list of trusted host patterns."/>
      <return description="An array of trusted host patterns" type="array"/>
    </docblock>
  </method>
  <method name="setTrustedHeaderName" start="607" end="614" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Sets the name for trusted headers.">The following header keys are supported:

 * Request::HEADER_CLIENT_IP:    defaults to X-Forwarded-For   (see getClientIp())
 * Request::HEADER_CLIENT_HOST:  defaults to X-Forwarded-Host  (see getHost())
 * Request::HEADER_CLIENT_PORT:  defaults to X-Forwarded-Port  (see getPort())
 * Request::HEADER_CLIENT_PROTO: defaults to X-Forwarded-Proto (see getScheme() and isSecure())

Setting an empty value allows to disable the trusted header for the given key.</description>
      <param description="The header key" type="string" variable="$key"/>
      <param description="The header name" type="string" variable="$value"/>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="getTrustedHeaderName" start="625" end="632" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Gets the trusted proxy header name."/>
      <param description="The header key" type="string" variable="$key"/>
      <return description="The header name" type="string"/>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="normalizeQueryString" start="644" end="675" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Normalizes a query string.">It builds a normalized query string, where keys/value pairs are alphabetized,
have consistent escaping and unneeded delimiters are removed.</description>
      <param description="Query string" type="string" variable="$qs"/>
      <return description="A normalized query string for the Request" type="string"/>
    </docblock>
    <parameter name="qs" byreference="false" type="{unknown}"/>
  </method>
  <method name="enableHttpMethodParameterOverride" start="688" end="691" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Enables support for the _method request parameter to determine the intended HTTP method.">Be warned that enabling this feature might lead to CSRF issues in your code.
Check that you are using CSRF tokens when required.
If the HTTP method parameter override is enabled, an html-form with method "POST" can be altered
and used to send a "PUT" or "DELETE" request via the _method request parameter.
If these methods are not protected against CSRF, this presents a possible vulnerability.

The HTTP method can only be overridden when the real HTTP method is POST.</description>
    </docblock>
  </method>
  <method name="getHttpMethodParameterOverride" start="698" end="701" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks whether support for the _method request parameter is enabled."/>
      <return description="True when the _method request parameter is enabled, false otherwise" type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="get" start="724" end="739" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets a &quot;parameter&quot; value.">This method is mainly useful for libraries that want to provide some flexibility.

Order of precedence: GET, PATH, POST

Avoid using this method in controllers:

 * slow
 * prefer to get from a "named" source

It is better to explicitly get request parameters from the appropriate
public property instead (query, attributes, request).</description>
      <param description="the key" type="string" variable="$key"/>
      <param description="the default value if the parameter key does not exist" type="mixed" variable="$default"/>
      <param description="is parameter deep in multidimensional array" type="object" variable="$deep">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="deep" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getSession" start="746" end="749" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the Session."/>
      <return description="The session" type="object">
        <type full="Symfony\Component\HttpFoundation\SessionInterface|null" namespace="Symfony\Component\HttpFoundation" name="SessionInterface|null"/>
      </return>
    </docblock>
  </method>
  <method name="hasPreviousSession" start="757" end="761" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Whether the request contains a Session which was started in one of the previous requests."/>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
    <inline>
      <comment value="the check for $this-&gt;session avoids malicious users trying to fake a session cookie with proper name" line="759"/>
    </inline>
  </method>
  <method name="hasSession" start="772" end="775" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Whether the request contains a Session object.">This method does not give any information about the state of the session object,
like whether the session is started or not. It is just a way to check if this Request
is associated with a Session instance.</description>
      <return description="true when the Request contains a Session object, false otherwise" type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="setSession" start="782" end="785" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the Session."/>
      <param description="The Session" type="object" variable="$session">
        <type full="Symfony\Component\HttpFoundation\Session\SessionInterface" namespace="Symfony\Component\HttpFoundation\Session" name="SessionInterface"/>
      </param>
    </docblock>
    <parameter name="session" byreference="false" type="object">
      <type full="Symfony\Component\HttpFoundation\Session\SessionInterface" namespace="Symfony\Component\HttpFoundation\Session" name="SessionInterface"/>
    </parameter>
  </method>
  <method name="getClientIps" start="800" end="837" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the client IP addresses.">In the returned array the most trusted IP address is first, and the
least trusted one last. The "real" client IP address is the last one,
but this is also the least trusted one. Trusted proxies are stripped.

Use this method carefully; you should use getClientIp() instead.</description>
      <return description="The client IP addresses" type="array"/>
      <see value="getClientIp()"/>
    </docblock>
  </method>
  <method name="getClientIp" start="857" end="862" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the client IP address.">This method can read the client IP address from the "X-Forwarded-For" header
when trusted proxies were set via "setTrustedProxies()". The "X-Forwarded-For"
header value is a comma+space separated list of IP addresses, the left-most
being the original client, and each successive proxy that passed the request
adding the IP address where it received the request from.

If your reverse proxy uses a different header name than "X-Forwarded-For",
("Client-Ip" for instance), configure it via "setTrustedHeaderName()" with
the "client-ip" key.</description>
      <return description="The client IP address" type="string"/>
      <see value="getClientIps()"/>
      <see value="http://en.wikipedia.org/wiki/X-Forwarded-For"/>
    </docblock>
  </method>
  <method name="getScriptName" start="869" end="872" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns current script name."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getPathInfo" start="888" end="895" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the path being requested relative to the executed script.">The path info always starts with a /.

Suppose this request is instantiated from /mysite on localhost:

 * http://localhost/mysite              returns an empty string
 * http://localhost/mysite/about        returns '/about'
 * http://localhost/mysite/enco%20ded   returns '/enco%20ded'
 * http://localhost/mysite/about?var=1  returns '/about'</description>
      <return description="The raw path (i.e. not urldecoded)" type="string"/>
    </docblock>
  </method>
  <method name="getBasePath" start="909" end="916" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the root path from which this request is executed.">Suppose that an index.php file instantiates this request object:

 * http://localhost/index.php         returns an empty string
 * http://localhost/index.php/page    returns an empty string
 * http://localhost/web/index.php     returns '/web'
 * http://localhost/we%20b/index.php  returns '/we%20b'</description>
      <return description="The raw path (i.e. not urldecoded)" type="string"/>
    </docblock>
  </method>
  <method name="getBaseUrl" start="928" end="935" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the root URL from which this request is executed.">The base URL never ends with a /.

This is similar to getBasePath(), except that it also includes the
script filename (e.g. index.php) if one exists.</description>
      <return description="The raw URL (i.e. not urldecoded)" type="string"/>
    </docblock>
  </method>
  <method name="getScheme" start="942" end="945" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the request's scheme."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getPort" start="960" end="987" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the port on which the request is made.">This method can read the client port from the "X-Forwarded-Port" header
when trusted proxies were set via "setTrustedProxies()".

The "X-Forwarded-Port" header must contain the client port.

If your reverse proxy uses a different header name than "X-Forwarded-Port",
configure it via "setTrustedHeaderName()" with the "client-port" key.</description>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getUser" start="994" end="997" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the user."/>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\string|null" namespace="Symfony\Component\HttpFoundation" name="string|null"/>
      </return>
    </docblock>
  </method>
  <method name="getPassword" start="1004" end="1007" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the password."/>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\string|null" namespace="Symfony\Component\HttpFoundation" name="string|null"/>
      </return>
    </docblock>
  </method>
  <method name="getUserInfo" start="1014" end="1024" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the user info."/>
      <return description="A user name and, optionally, scheme-specific information about how to gain authorization to access the server" type="string"/>
    </docblock>
  </method>
  <method name="getHttpHost" start="1033" end="1043" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the HTTP host being requested.">The port name will be appended to the host if it's non-standard.</description>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getRequestUri" start="1050" end="1057" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the requested URI (path and query string)."/>
      <return description="The raw URI (i.e. not URI decoded)" type="string"/>
    </docblock>
  </method>
  <method name="getSchemeAndHttpHost" start="1067" end="1070" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the scheme and HTTP host.">If the URL was called with basic authentication, the user
and the password are not added to the generated string.</description>
      <return description="The scheme and HTTP host" type="string"/>
    </docblock>
  </method>
  <method name="getUri" start="1079" end="1086" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generates a normalized URI (URL) for the Request."/>
      <return description="A normalized URI (URL) for the Request" type="string"/>
      <see value="getQueryString()"/>
    </docblock>
  </method>
  <method name="getUriForPath" start="1095" end="1098" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generates a normalized URI for the given path."/>
      <param description="A path to use instead of the current one" type="string" variable="$path"/>
      <return description="The normalized URI for the path" type="string"/>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}"/>
  </method>
  <method name="getRelativeUriForPath" start="1119" end="1153" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the path as relative reference from the current Request path.">Only the URIs path component (no schema, host etc.) is relevant and must be given.
Both paths must be absolute and not contain relative parts.
Relative URLs from one resource to another are useful when generating self-contained downloadable document archives.
Furthermore, they can be used to reduce the link size in documents.

Example target paths, given a base path of "/a/b/c/d":
- "/a/b/c/d"     -&gt; ""
- "/a/b/c/"      -&gt; "./"
- "/a/b/"        -&gt; "../"
- "/a/b/c/other" -&gt; "other"
- "/a/x/y"       -&gt; "../../x/y"</description>
      <param description="The target path" type="string" variable="$path"/>
      <return description="The relative target path" type="string"/>
    </docblock>
    <parameter name="path" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="be sure that we are dealing with an absolute path" line="1121"/>
      <comment value="A reference to the same base directory or an empty subdirectory must be prefixed with &quot;./&quot;." line="1146"/>
      <comment value="This also applies to a segment with a colon character (e.g., &quot;file:colon&quot;) that cannot be used" line="1147"/>
      <comment value="as the first segment of a relative-path reference, as it would be mistaken for a scheme name" line="1148"/>
      <comment value="(see http://tools.ietf.org/html/rfc3986#section-4.2)." line="1149"/>
    </inline>
  </method>
  <method name="getQueryString" start="1163" end="1168" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generates the normalized query string for the Request.">It builds a normalized query string, where keys/value pairs are alphabetized
and have consistent escaping.</description>
      <return description="A normalized query string for the Request" type="object">
        <type full="Symfony\Component\HttpFoundation\string|null" namespace="Symfony\Component\HttpFoundation" name="string|null"/>
      </return>
    </docblock>
  </method>
  <method name="isSecure" start="1184" end="1193" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether the request is secure or not.">This method can read the client protocol from the "X-Forwarded-Proto" header
when trusted proxies were set via "setTrustedProxies()".

The "X-Forwarded-Proto" header must contain the protocol: "https" or "http".

If your reverse proxy uses a different header name than "X-Forwarded-Proto"
("SSL_HTTPS" for instance), configure it via "setTrustedHeaderName()" with
the "client-proto" key.</description>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="getHost" start="1210" end="1252" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the host name.">This method can read the client host name from the "X-Forwarded-Host" header
when trusted proxies were set via "setTrustedProxies()".

The "X-Forwarded-Host" header must contain the client host name.

If your reverse proxy uses a different header name than "X-Forwarded-Host",
configure it via "setTrustedHeaderName()" with the "client-host" key.</description>
      <return type="string"/>
      <throws description="when the host name is invalid" type="object">
        <type full="\UnexpectedValueException" namespace="" name="UnexpectedValueException"/>
      </throws>
    </docblock>
    <inline>
      <comment value="trim and remove port number from host" line="1222"/>
      <comment value="host is lowercase as per RFC 952/2181" line="1223"/>
      <comment value="as the host can come from the user (HTTP_HOST and depending on the configuration, SERVER_NAME too can come from the user)" line="1226"/>
      <comment value="check that it does not contain forbidden characters (see RFC 952 and RFC 2181)" line="1227"/>
      <comment value="use preg_replace() instead of preg_match() to prevent DoS attacks with long host names" line="1228"/>
    </inline>
  </method>
  <method name="setMethod" start="1259" end="1263" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the request method."/>
      <param type="string" variable="$method"/>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
  </method>
  <method name="getMethod" start="1280" end="1295" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the request &quot;intended&quot; method.">If the X-HTTP-Method-Override header is set, and if the method is a POST,
then it is used to determine the "real" intended HTTP method.

The _method request parameter can also be used to determine the HTTP method,
but only if enableHttpMethodParameterOverride() has been called.

The method is always an uppercased string.</description>
      <return description="The request method" type="string"/>
      <see value="getRealMethod()"/>
    </docblock>
  </method>
  <method name="getRealMethod" start="1304" end="1307" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the &quot;real&quot; request method."/>
      <return description="The request method" type="string"/>
      <see value="getMethod()"/>
    </docblock>
  </method>
  <method name="getMimeType" start="1316" end="1323" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the mime type associated with the format."/>
      <param description="The format" type="string" variable="$format"/>
      <return description="The associated mime type (null if not found)" type="string"/>
    </docblock>
    <parameter name="format" byreference="false" type="{unknown}"/>
  </method>
  <method name="getFormat" start="1332" end="1351" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the format associated with the mime type."/>
      <param description="The associated mime type" type="string" variable="$mimeType"/>
      <return description="The format (null if not found)" type="object">
        <type full="Symfony\Component\HttpFoundation\string|null" namespace="Symfony\Component\HttpFoundation" name="string|null"/>
      </return>
    </docblock>
    <parameter name="mimeType" byreference="false" type="{unknown}"/>
  </method>
  <method name="setFormat" start="1359" end="1366" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Associates a format with mime types."/>
      <param description="The format" type="string" variable="$format"/>
      <param description="The associated mime types (the preferred one must be the first as it will be used as the content type)" type="object" variable="$mimeTypes">
        <type full="Symfony\Component\HttpFoundation\string|array" namespace="Symfony\Component\HttpFoundation" name="string|array"/>
      </param>
    </docblock>
    <parameter name="format" byreference="false" type="{unknown}"/>
    <parameter name="mimeTypes" byreference="false" type="{unknown}"/>
  </method>
  <method name="getRequestFormat" start="1381" end="1388" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the request format.">Here is the process to determine the format:

 * format defined by the user (with setRequestFormat())
 * _format request parameter
 * $default</description>
      <param description="The default format" type="string" variable="$default"/>
      <return description="The request format" type="string"/>
    </docblock>
    <parameter name="default" byreference="false" type="string" default="'html'"/>
  </method>
  <method name="setRequestFormat" start="1395" end="1398" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the request format."/>
      <param description="The request format" type="string" variable="$format"/>
    </docblock>
    <parameter name="format" byreference="false" type="{unknown}"/>
  </method>
  <method name="getContentType" start="1405" end="1408" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the format associated with the request."/>
      <return description="The format (null if no content type is present)" type="object">
        <type full="Symfony\Component\HttpFoundation\string|null" namespace="Symfony\Component\HttpFoundation" name="string|null"/>
      </return>
    </docblock>
  </method>
  <method name="setDefaultLocale" start="1415" end="1422" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the default locale."/>
      <param type="string" variable="$locale"/>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
  </method>
  <method name="getDefaultLocale" start="1429" end="1432" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the default locale."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="setLocale" start="1439" end="1442" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the locale."/>
      <param type="string" variable="$locale"/>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
  </method>
  <method name="getLocale" start="1449" end="1452" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the locale."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="isMethod" start="1461" end="1464" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks if the request method is of specified type."/>
      <param description="Uppercase request method (GET, POST etc)" type="string" variable="$method"/>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
  </method>
  <method name="isMethodSafe" start="1471" end="1474" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether the method is safe or not."/>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isMethodCacheable" start="1481" end="1484" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether the method is cacheable or not."/>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="getContent" start="1495" end="1534" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the request body content."/>
      <param description="If true, a resource will be returned" type="object" variable="$asResource">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </param>
      <return description="The request body content or a resource to read the body stream" type="object">
        <type full="Symfony\Component\HttpFoundation\string|resource" namespace="Symfony\Component\HttpFoundation" name="string|resource"/>
      </return>
      <throws type="object">
        <type full="\LogicException" namespace="" name="LogicException"/>
      </throws>
    </docblock>
    <parameter name="asResource" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="getETags" start="1541" end="1544" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the Etags."/>
      <return description="The entity tags" type="array"/>
    </docblock>
  </method>
  <method name="isNoCache" start="1549" end="1552" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="getPreferredLanguage" start="1561" end="1587" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the preferred language."/>
      <param description="An array of ordered available locales" type="array" variable="$locales"/>
      <return description="The preferred locale" type="object">
        <type full="Symfony\Component\HttpFoundation\string|null" namespace="Symfony\Component\HttpFoundation" name="string|null"/>
      </return>
    </docblock>
    <parameter name="locales" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="getLanguages" start="1594" end="1627" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets a list of languages acceptable by the client browser."/>
      <return description="Languages ordered in the user browser preferences" type="array"/>
    </docblock>
  </method>
  <method name="getCharsets" start="1634" end="1641" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets a list of charsets acceptable by the client browser."/>
      <return description="List of charsets in preferable order" type="array"/>
    </docblock>
  </method>
  <method name="getEncodings" start="1648" end="1655" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets a list of encodings acceptable by the client browser."/>
      <return description="List of encodings in preferable order" type="array"/>
    </docblock>
  </method>
  <method name="getAcceptableContentTypes" start="1662" end="1669" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets a list of content types acceptable by the client browser."/>
      <return description="List of content types in preferable order" type="array"/>
    </docblock>
  </method>
  <method name="isXmlHttpRequest" start="1681" end="1684" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the request is a XMLHttpRequest.">It works if your JavaScript library sets an X-Requested-With HTTP header.
It is known to work with common JavaScript frameworks:</description>
      <link value="http://en.wikipedia.org/wiki/List_of_Ajax_frameworks#JavaScript"/>
      <return description="true if the request is an XMLHttpRequest, false otherwise" type="object">
        <type full="Symfony\Component\HttpFoundation\bool" namespace="Symfony\Component\HttpFoundation" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="prepareRequestUri" start="1694" end="1734" abstract="false" final="false" static="false" visibility="protected">
    <inline>
      <comment value="normalize the request URI to ease creating sub-requests from this request" line="1730"/>
    </inline>
  </method>
  <method name="prepareBaseUrl" start="1741" end="1800" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Prepares the base URL."/>
      <return type="string"/>
    </docblock>
    <inline>
      <comment value="Does the baseUrl have anything in common with the request_uri?" line="1768"/>
      <comment value="If using mod_rewrite or ISAPI_Rewrite strip the script filename" line="1792"/>
      <comment value="out of baseUrl. $pos !== 0 makes sure it is not matching a value" line="1793"/>
      <comment value="from PATH_INFO or QUERY_STRING" line="1794"/>
    </inline>
  </method>
  <method name="prepareBasePath" start="1807" end="1826" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Prepares the base path."/>
      <return description="base path" type="string"/>
    </docblock>
  </method>
  <method name="preparePathInfo" start="1833" end="1855" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Prepares the path info."/>
      <return description="path info" type="string"/>
    </docblock>
    <inline>
      <comment value="Remove the query string from REQUEST_URI" line="1841"/>
    </inline>
  </method>
  <method name="initializeFormats" start="1860" end="1874" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Initializes HTTP request formats."/>
    </docblock>
  </method>
  <method name="setPhpDefaultLocale" start="1881" end="1892" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Sets the default PHP locale."/>
      <param type="string" variable="$locale"/>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="if either the class Locale doesn't exist, or an exception is thrown when" line="1883"/>
      <comment value="setting the default locale, the intl module is not installed, and" line="1884"/>
      <comment value="the call can be ignored:" line="1885"/>
    </inline>
  </method>
  <method name="getUrlencodedPrefix" start="1903" end="1916" abstract="false" final="false" static="false" visibility="private">
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
  </method>
  <method name="createRequestFromFactory" start="1918" end="1931" abstract="false" final="false" static="true" visibility="private">
    <parameter name="query" byreference="false" type="array" default=""/>
    <parameter name="request" byreference="false" type="array" default=""/>
    <parameter name="attributes" byreference="false" type="array" default=""/>
    <parameter name="cookies" byreference="false" type="array" default=""/>
    <parameter name="files" byreference="false" type="array" default=""/>
    <parameter name="server" byreference="false" type="array" default=""/>
    <parameter name="content" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="isFromTrustedProxy" start="1933" end="1936" abstract="false" final="false" static="false" visibility="private"/>
  <method name="normalizeAndFilterClientIps" start="1938" end="1967" abstract="false" final="false" static="false" visibility="private">
    <parameter name="clientIps" byreference="false" type="array"/>
    <parameter name="ip" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Complete the IP chain with the IP the request actually came from" line="1940"/>
      <comment value="Now the IP chain contains only untrusted proxies and the client IP" line="1965"/>
    </inline>
  </method>
</class>
