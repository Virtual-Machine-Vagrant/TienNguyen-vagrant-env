<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Generic_Sniffs_CodeAnalysis_ForLoopShouldBeWhileLoopSniff" namespace="" name="Generic_Sniffs_CodeAnalysis_ForLoopShouldBeWhileLoopSniff" abstract="false" final="false" start="40" end="102">
  <file path="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis" file="ForLoopShouldBeWhileLoopSniff.php" realpath="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/ForLoopShouldBeWhileLoopSniff.php" size="2873" time="2016-01-19T23:39:10+00:00" unixtime="1453246750" sha1="70aca8d952a18ead28b835acd4b60af61bde92a2" relative="freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/CodeAnalysis/ForLoopShouldBeWhileLoopSniff.php"/>
  <docblock>
    <description compact="Detects for-loops that can be simplified to a while-loop.">This rule is based on the PMD rule catalog. Detects for-loops that can be
simplified as a while-loop.

&lt;code&gt;
class Foo
{
    public function bar($x)
    {
        for (;true;) true; // No Init or Update part, may as well be: while (true)
    }
}
&lt;/code&gt;</description>
    <category value="PHP"/>
    <package value="PHP_CodeSniffer"/>
    <author value="Manuel Pichler &lt;mapi@manuel-pichler.de&gt;"/>
    <copyright value="2007-2014 Manuel Pichler. All rights reserved."/>
    <license name="http://www.opensource.org/licenses/bsd-license.php  BSD License"/>
    <version value="Release: @package_version@"/>
    <link value="http://pear.php.net/package/PHP_CodeSniffer"/>
  </docblock>
  <implements full="PHP_CodeSniffer_Sniff" namespace="" name="PHP_CodeSniffer_Sniff"/>
  <method name="register" start="49" end="53" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Registers the tokens that this sniff wants to listen for."/>
      <return type="array" of="int"/>
    </docblock>
  </method>
  <method name="process" start="65" end="99" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this test, when one of its tokens is encountered."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Skip invalid statement." line="70"/>
    </inline>
  </method>
</class>
