<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\DomCrawler\FormFieldRegistry" namespace="Symfony\Component\DomCrawler" name="FormFieldRegistry" abstract="false" final="false" start="19" end="215">
  <file path="/home/web/example/src/freegame_developer/vendor/symfony/dom-crawler" file="FormFieldRegistry.php" realpath="/home/web/example/src/freegame_developer/vendor/symfony/dom-crawler/FormFieldRegistry.php" size="6000" time="2016-10-18T13:42:15+00:00" unixtime="1476798135" sha1="25cd07295304e1552a12f9e97c5ed75765fe1a9c" relative="freegame_developer/vendor/symfony/dom-crawler/FormFieldRegistry.php"/>
  <docblock>
    <description compact="This is an internal class that must not be used directly."/>
  </docblock>
  <member name="fields" type="array" default="" visibility="private" static="false" line="21"/>
  <member name="base" visibility="private" static="false" line="23"/>
  <method name="add" start="30" end="47" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a field to the registry."/>
      <param description="The field" type="object" variable="$field">
        <type full="Symfony\Component\DomCrawler\Field\FormField" namespace="Symfony\Component\DomCrawler\Field" name="FormField"/>
      </param>
    </docblock>
    <parameter name="field" byreference="false" type="object">
      <type full="Symfony\Component\DomCrawler\Field\FormField" namespace="Symfony\Component\DomCrawler\Field" name="FormField"/>
    </parameter>
  </method>
  <method name="remove" start="54" end="66" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes a field and its children from the registry."/>
      <param description="The fully qualified name of the base field" type="string" variable="$name"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="get" start="77" end="90" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the value of the field and its children."/>
      <param description="The fully qualified name of the field" type="string" variable="$name"/>
      <return description="The value of the field" type="mixed"/>
      <throws description="if the field does not exist" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="has" start="99" end="108" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests whether the form has the given field."/>
      <param description="The fully qualified name of the field" type="string" variable="$name"/>
      <return description="Whether the form has the given field" type="object">
        <type full="Symfony\Component\DomCrawler\bool" namespace="Symfony\Component\DomCrawler" name="bool"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="set" start="118" end="131" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the value of a field and its children."/>
      <param description="The fully qualified name of the field" type="string" variable="$name"/>
      <param description="The value" type="mixed" variable="$value"/>
      <throws description="if the field does not exist" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="all" start="138" end="141" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the list of field with their value."/>
      <return description="The list of fields as array((string) Fully qualified name =&gt; (mixed) value)" type="array" of="object">
        <type full="Symfony\Component\DomCrawler\FormField" namespace="Symfony\Component\DomCrawler" name="FormField"/>
      </return>
    </docblock>
  </method>
  <method name="create" start="154" end="161" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Creates an instance of the class.">This function is made private because it allows overriding the $base and
the $values properties without any type checking.</description>
      <param description="The fully qualified name of the base field" type="string" variable="$base"/>
      <param description="The values of the fields" type="array" variable="$values"/>
      <return type="object">
        <type full="Symfony\Component\DomCrawler\FormFieldRegistry" namespace="Symfony\Component\DomCrawler" name="FormFieldRegistry"/>
      </return>
    </docblock>
    <parameter name="base" byreference="false" type="{unknown}"/>
    <parameter name="values" byreference="false" type="array"/>
  </method>
  <method name="walk" start="172" end="184" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Transforms a PHP array in a list of fully qualified name / value."/>
      <param description="The PHP array" type="array" variable="$array"/>
      <param description="The name of the base field" type="string" variable="$base"/>
      <param description="The initial values" type="array" variable="$output"/>
      <return description="The list of fields as array((string) Fully qualified name =&gt; (mixed) value)" type="array"/>
    </docblock>
    <parameter name="array" byreference="false" type="array"/>
    <parameter name="base" byreference="false" type="string" default="''"/>
    <parameter name="output" byreference="true" type="array" default=""/>
  </method>
  <method name="getSegments" start="197" end="214" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Splits a field name into segments as a web browser would do.">&lt;code&gt;
    getSegments('base[foo][3][]') = array('base', 'foo, '3', '');
&lt;/code&gt;</description>
      <param description="The name of the field" type="string" variable="$name"/>
      <return description="The list of segments" type="array" of="object">
        <type full="Symfony\Component\DomCrawler\string" namespace="Symfony\Component\DomCrawler" name="string"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
</class>
