<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Psy\CodeCleaner" namespace="Psy" name="CodeCleaner" abstract="false" final="false" start="41" end="214">
  <file path="/home/web/example/src/freegame_developer/vendor/psy/psysh/src/Psy" file="CodeCleaner.php" realpath="/home/web/example/src/freegame_developer/vendor/psy/psysh/src/Psy/CodeCleaner.php" size="6343" time="2016-03-09T05:03:14+00:00" unixtime="1457499794" sha1="6dfe148cad82173061bee6771cd641f49a9dfc1e" relative="freegame_developer/vendor/psy/psysh/src/Psy/CodeCleaner.php"/>
  <docblock>
    <description compact="A service to clean up user input, detect parse errors before they happen, and generally work around issues with the PHP code evaluation experience."/>
  </docblock>
  <member name="parser" visibility="private" static="false" line="43"/>
  <member name="printer" visibility="private" static="false" line="44"/>
  <member name="traverser" visibility="private" static="false" line="45"/>
  <member name="namespace" visibility="private" static="false" line="46"/>
  <constructor name="__construct" start="55" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="CodeCleaner constructor."/>
      <param description="A PhpParser Parser instance. One will be created if not explicitly supplied." type="object" variable="$parser">
        <type full="PhpParser\Parser" namespace="PhpParser" name="Parser"/>
      </param>
      <param description="A PhpParser Printer instance. One will be created if not explicitly supplied." type="object" variable="$printer">
        <type full="PhpParser\PrettyPrinter\Standard" namespace="PhpParser\PrettyPrinter" name="Standard"/>
      </param>
      <param description="A PhpParser NodeTraverser instance. One will be created if not explicitly supplied." type="object" variable="$traverser">
        <type full="PhpParser\NodeTraverser" namespace="PhpParser" name="NodeTraverser"/>
      </param>
    </docblock>
    <parameter name="parser" byreference="false" type="{unknown}" default="" constant="null">
      <type full="PhpParser\Parser" namespace="PhpParser" name="Parser"/>
    </parameter>
    <parameter name="printer" byreference="false" type="{unknown}" default="" constant="null">
      <type full="PhpParser\PrettyPrinter\Standard" namespace="PhpParser\PrettyPrinter" name="Standard"/>
    </parameter>
    <parameter name="traverser" byreference="false" type="{unknown}" default="" constant="null">
      <type full="PhpParser\NodeTraverser" namespace="PhpParser" name="NodeTraverser"/>
    </parameter>
  </constructor>
  <method name="getDefaultPasses" start="76" end="98" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Get default CodeCleaner passes."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="clean" start="110" end="121" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clean the given array of code."/>
      <throws description="if the code is invalid PHP, and cannot be coerced into valid PHP." type="object">
        <type full="Psy\Exception\ParseErrorException" namespace="Psy\Exception" name="ParseErrorException"/>
      </throws>
      <param type="array" variable="$codeLines"/>
      <param type="object" variable="$requireSemicolons">
        <type full="Psy\bool" namespace="Psy" name="bool"/>
      </param>
      <return description="Cleaned PHP code, False if the input is incomplete." type="object">
        <type full="Psy\string|false" namespace="Psy" name="string|false"/>
      </return>
    </docblock>
    <parameter name="codeLines" byreference="false" type="array"/>
    <parameter name="requireSemicolons" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="Catch fatal errors before they happen" line="117"/>
    </inline>
  </method>
  <method name="setNamespace" start="130" end="133" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the current local namespace."/>
      <param description="(default: null)" type="object" variable="$namespace">
        <type full="Psy\null|array" namespace="Psy" name="null|array"/>
      </param>
      <return type="object">
        <type full="Psy\null|array" namespace="Psy" name="null|array"/>
      </return>
    </docblock>
    <parameter name="namespace" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="getNamespace" start="140" end="143" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the current local namespace."/>
      <return type="object">
        <type full="Psy\null|array" namespace="Psy" name="null|array"/>
      </return>
    </docblock>
  </method>
  <method name="parse" start="155" end="179" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Lex and parse a block of code."/>
      <see value="Parser::parse"/>
      <param type="string" variable="$code"/>
      <param type="object" variable="$requireSemicolons">
        <type full="Psy\bool" namespace="Psy" name="bool"/>
      </param>
      <return description="A set of statements" type="array"/>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
    <parameter name="requireSemicolons" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="parseErrorIsEOF" start="181" end="186" abstract="false" final="false" static="false" visibility="private">
    <parameter name="e" byreference="false" type="object">
      <type full="PhpParser\Error" namespace="PhpParser" name="Error"/>
    </parameter>
  </method>
  <method name="parseErrorIsUnclosedString" start="200" end="213" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="A special test for unclosed single-quoted strings.">Unlike (all?) other unclosed statements, single quoted strings have
their own special beautiful snowflake syntax error just for
themselves.</description>
      <param type="object" variable="$e">
        <type full="\PhpParser\Error" namespace="\PhpParser" name="Error"/>
      </param>
      <param type="string" variable="$code"/>
      <return type="object">
        <type full="Psy\bool" namespace="Psy" name="bool"/>
      </return>
    </docblock>
    <parameter name="e" byreference="false" type="object">
      <type full="PhpParser\Error" namespace="PhpParser" name="Error"/>
    </parameter>
    <parameter name="code" byreference="false" type="{unknown}"/>
  </method>
</class>
