<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Generic_Sniffs_Files_LineEndingsSniff" namespace="" name="Generic_Sniffs_Files_LineEndingsSniff" abstract="false" final="false" start="30" end="145">
  <file path="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/Files" file="LineEndingsSniff.php" realpath="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/Files/LineEndingsSniff.php" size="4446" time="2016-01-19T23:39:10+00:00" unixtime="1453246750" sha1="ee876fa8bce669054d726e14132949b46eb8078a" relative="freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/Generic/Sniffs/Files/LineEndingsSniff.php"/>
  <docblock>
    <description compact="Generic_Sniffs_Files_LineEndingsSniff.">Checks that end of line characters are correct.</description>
    <category value="PHP"/>
    <package value="PHP_CodeSniffer"/>
    <author value="Greg Sherwood &lt;gsherwood@squiz.net&gt;"/>
    <author value="Marc McIntyre &lt;mmcintyre@squiz.net&gt;"/>
    <copyright value="2006-2014 Squiz Pty Ltd (ABN 77 084 670 600)"/>
    <license name="https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence"/>
    <version value="Release: @package_version@"/>
    <link value="http://pear.php.net/package/PHP_CodeSniffer"/>
  </docblock>
  <implements full="PHP_CodeSniffer_Sniff" namespace="" name="PHP_CodeSniffer_Sniff"/>
  <member name="supportedTokenizers" type="array" default="" visibility="public" static="false" line="38">
    <docblock>
      <description compact="A list of tokenizers this sniff supports."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="eolChar" type="string" default="'\n'" visibility="public" static="false" line="49">
    <docblock>
      <description compact="The valid EOL character."/>
      <var type="string"/>
    </docblock>
  </member>
  <method name="register" start="57" end="61" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of tokens this test wants to listen for."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="process" start="73" end="142" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this sniff, when one of its tokens is encountered."/>
      <param description="The file being scanned." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token in" type="int" variable="$stackPtr">the stack passed in $tokens.</param>
      <return type="int"/>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Check for single line files without an EOL. This is a very special" line="86"/>
      <comment value="case and the EOL char is set to \n when this happens." line="87"/>
      <comment value="Errors are always reported on line 1, no matter where the first PHP tag is." line="107"/>
      <comment value="end if" line="137"/>
      <comment value="Ignore the rest of the file." line="139"/>
    </inline>
  </method>
</class>
