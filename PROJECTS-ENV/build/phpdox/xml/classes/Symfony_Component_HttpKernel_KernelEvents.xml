<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Symfony\Component\HttpKernel\KernelEvents" namespace="Symfony\Component\HttpKernel" name="KernelEvents" abstract="false" final="true" start="19" end="119">
  <file path="/home/web/example/src/freegame_developer/vendor/symfony/http-kernel" file="KernelEvents.php" realpath="/home/web/example/src/freegame_developer/vendor/symfony/http-kernel/KernelEvents.php" size="3348" time="2016-10-27T01:37:19+00:00" unixtime="1477532239" sha1="206f8dc33ad82d9726f1d04755032bab231650d0" relative="freegame_developer/vendor/symfony/http-kernel/KernelEvents.php"/>
  <docblock>
    <description compact="Contains all events thrown in the HttpKernel component."/>
    <author value="Bernhard Schussek &lt;bschussek@gmail.com&gt;"/>
  </docblock>
  <constant type="string" name="REQUEST" value="'kernel.request'">
    <docblock>
      <description compact="The REQUEST event occurs at the very beginning of request dispatching.">This event allows you to create a response for a request before any
other code in the framework is executed. The event listener method
receives a Symfony\Component\HttpKernel\Event\GetResponseEvent
instance.</description>
      <event/>
      <var type="string"/>
    </docblock>
  </constant>
  <constant type="string" name="EXCEPTION" value="'kernel.exception'">
    <docblock>
      <description compact="The EXCEPTION event occurs when an uncaught exception appears.">This event allows you to create a response for a thrown exception or
to modify the thrown exception. The event listener method receives
a Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent
instance.</description>
      <event/>
      <var type="string"/>
    </docblock>
  </constant>
  <constant type="string" name="VIEW" value="'kernel.view'">
    <docblock>
      <description compact="The VIEW event occurs when the return value of a controller is not a Response instance.">This event allows you to create a response for the return value of the
controller. The event listener method receives a
Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent
instance.</description>
      <event/>
      <var type="string"/>
    </docblock>
  </constant>
  <constant type="string" name="CONTROLLER" value="'kernel.controller'">
    <docblock>
      <description compact="The CONTROLLER event occurs once a controller was found for handling a request.">This event allows you to change the controller that will handle the
request. The event listener method receives a
Symfony\Component\HttpKernel\Event\FilterControllerEvent instance.</description>
      <event/>
      <var type="string"/>
    </docblock>
  </constant>
  <constant type="string" name="RESPONSE" value="'kernel.response'">
    <docblock>
      <description compact="The RESPONSE event occurs once a response was created for replying to a request.">This event allows you to modify or replace the response that will be
replied. The event listener method receives a
Symfony\Component\HttpKernel\Event\FilterResponseEvent instance.</description>
      <event/>
      <var type="string"/>
    </docblock>
  </constant>
  <constant type="string" name="TERMINATE" value="'kernel.terminate'">
    <docblock>
      <description compact="The TERMINATE event occurs once a response was sent.">This event allows you to run expensive post-response jobs.
The event listener method receives a
Symfony\Component\HttpKernel\Event\PostResponseEvent instance.</description>
      <event/>
      <var type="string"/>
    </docblock>
  </constant>
  <constant type="string" name="FINISH_REQUEST" value="'kernel.finish_request'">
    <docblock>
      <description compact="The FINISH_REQUEST event occurs when a response was generated for a request.">This event allows you to reset the global and environmental state of
the application, when it was changed during the request.
The event listener method receives a
Symfony\Component\HttpKernel\Event\FinishRequestEvent instance.</description>
      <event/>
      <var type="string"/>
    </docblock>
  </constant>
</class>
