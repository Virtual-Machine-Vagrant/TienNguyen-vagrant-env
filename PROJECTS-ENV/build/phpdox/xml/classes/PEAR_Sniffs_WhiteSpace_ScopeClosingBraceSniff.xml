<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PEAR_Sniffs_WhiteSpace_ScopeClosingBraceSniff" namespace="" name="PEAR_Sniffs_WhiteSpace_ScopeClosingBraceSniff" abstract="false" final="false" start="30" end="193">
  <file path="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/PEAR/Sniffs/WhiteSpace" file="ScopeClosingBraceSniff.php" realpath="/home/web/example/src/freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/PEAR/Sniffs/WhiteSpace/ScopeClosingBraceSniff.php" size="6921" time="2016-01-19T23:39:10+00:00" unixtime="1453246750" sha1="5316049a6d21b29bf61149fa4fb0984e9a34265c" relative="freegame_developer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/PEAR/Sniffs/WhiteSpace/ScopeClosingBraceSniff.php"/>
  <docblock>
    <description compact="PEAR_Sniffs_Whitespace_ScopeClosingBraceSniff.">Checks that the closing braces of scopes are aligned correctly.</description>
    <category value="PHP"/>
    <package value="PHP_CodeSniffer"/>
    <author value="Greg Sherwood &lt;gsherwood@squiz.net&gt;"/>
    <author value="Marc McIntyre &lt;mmcintyre@squiz.net&gt;"/>
    <copyright value="2006-2014 Squiz Pty Ltd (ABN 77 084 670 600)"/>
    <license name="https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence"/>
    <version value="Release: @package_version@"/>
    <link value="http://pear.php.net/package/PHP_CodeSniffer"/>
  </docblock>
  <implements full="PHP_CodeSniffer_Sniff" namespace="" name="PHP_CodeSniffer_Sniff"/>
  <member name="indent" type="integer" default="4" visibility="public" static="false" line="38">
    <docblock>
      <description compact="The number of spaces code should be indented."/>
      <var type="int"/>
    </docblock>
  </member>
  <method name="register" start="46" end="50" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of tokens this test wants to listen for."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="process" start="62" end="190" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Processes this test, when one of its tokens is encountered."/>
      <param description="All the tokens found in the document." type="object" variable="$phpcsFile">
        <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
      </param>
      <param description="The position of the current token" type="int" variable="$stackPtr">in the stack passed in $tokens.</param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="phpcsFile" byreference="false" type="object">
      <type full="PHP_CodeSniffer_File" namespace="" name="PHP_CodeSniffer_File"/>
    </parameter>
    <parameter name="stackPtr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If this is an inline condition (ie. there is no scope opener), then" line="66"/>
      <comment value="return, as this is not a new scope." line="67"/>
      <comment value="If the scope closer doesn't think it belongs to this scope opener" line="75"/>
      <comment value="then the opener is sharing its closer with other tokens. We only" line="76"/>
      <comment value="want to process the closer once, so skip this one." line="77"/>
      <comment value="We need to actually find the first piece of content on this line," line="84"/>
      <comment value="because if this is a method with tokens before it (public, static etc)" line="85"/>
      <comment value="or an if with an else before it, then we need to start the scope" line="86"/>
      <comment value="checking from there, rather than the current token." line="87"/>
      <comment value="Check that the closing brace is on it's own line." line="109"/>
      <comment value="Check now that the closing brace is lined up correctly." line="131"/>
      <comment value="end if" line="178"/>
    </inline>
  </method>
</class>
