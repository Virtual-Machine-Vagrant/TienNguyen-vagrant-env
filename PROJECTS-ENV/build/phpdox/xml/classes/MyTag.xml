<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="MyTag" namespace="" name="MyTag" abstract="false" final="true" start="35" end="109">
  <file path="/home/web/example/src/freegame_developer/vendor/phpdocumentor/reflection-docblock/examples" file="04-adding-your-own-tag.php" realpath="/home/web/example/src/freegame_developer/vendor/phpdocumentor/reflection-docblock/examples/04-adding-your-own-tag.php" size="5968" time="2016-09-30T07:12:33+00:00" unixtime="1475219553" sha1="5b5d48d400857a3cbc2319f344f6738cb4334aa0" relative="freegame_developer/vendor/phpdocumentor/reflection-docblock/examples/04-adding-your-own-tag.php"/>
  <docblock>
    <description compact="An example of a custom tag called `my-tag` with an optional description.">A Custom Tag is a class that can consist of two parts:

1. a method `create` that is a static factory for this class.
2. methods and properties that have this object act as an immutable Value Object representing a Tag instance.

The static factory `create` is used to convert a tag line (without the tag name) into an instance of the
same tag object with the right constructor parameters set. This method has a dynamic list of parameters so that you
can inject various dependencies, see the method's DocBlock for more information.

An object of this class, and its methods and properties, represent a single instance of that tag in your
documentation in the form of a Value Object whose properties should not be changed after instantiation (it should be
immutable).

&gt; Important: Tag classes that act as Factories using the `create` method should implement the TagFactory interface.</description>
  </docblock>
  <extends full="phpDocumentor\Reflection\DocBlock\Tags\BaseTag" namespace="phpDocumentor\Reflection\DocBlock\Tags" name="BaseTag"/>
  <implements full="phpDocumentor\Reflection\DocBlock\Tags\Factory\StaticMethod" namespace="phpDocumentor\Reflection\DocBlock\Tags\Factory" name="StaticMethod"/>
  <member name="name" type="string" default="'my-tag'" visibility="protected" static="false" line="44">
    <docblock>
      <description compact="A required property that is used by Formatters to reconstitute the complete tag line."/>
      <see value="Formatter"/>
      <var type="string"/>
    </docblock>
  </member>
  <constructor name="__construct" start="55" end="58" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The constructor for this Tag; this should contain all properties for this object."/>
      <param description="An example of how to add a Description to the tag; the Description is often" type="object" variable="$description">an optional variable so passing null is allowed in this instance (though you can
                                also construct an empty description object).<type full="phpDocumentor\Reflection\DocBlock\Description" namespace="phpDocumentor\Reflection\DocBlock" name="Description"/></param>
      <see value="BaseTag for the declaration of the description property and getDescription method."/>
    </docblock>
    <parameter name="description" byreference="false" type="{unknown}" default="" constant="null">
      <type full="phpDocumentor\Reflection\DocBlock\Description" namespace="phpDocumentor\Reflection\DocBlock" name="Description"/>
    </parameter>
  </constructor>
  <method name="create" start="89" end="95" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="A static Factory that creates a new instance of the current Tag.">In this example the MyTag tag can be created by passing a description text as $body. Because we have added
a $descriptionFactory that is type-hinted as DescriptionFactory we can now construct a new Description object
and pass that to the constructor.
&gt; You could directly instantiate a Description object here but that won't be parsed for inline tags and Types
&gt; won't be resolved. The DescriptionFactory will take care of those actions.
The `create` method's interface states that this method only features a single parameter (`$body`) but the
<see xmlns="http://xml.phpdox.net/src" value="TagFactory"/> will read the signature of this method and if it has more parameters then it will try
to find declarations for it in the ServiceLocator of the TagFactory (see <see xmlns="http://xml.phpdox.net/src" value="TagFactory::$serviceLocator"/>).
&gt; Important: all properties following the `$body` should default to `null`, otherwise PHP will error because
&gt; it no longer matches the interface. This is why you often see the default tags check that an optional argument
&gt; is not null nonetheless.
</description>
      <param type="string" variable="$body"/>
      <param type="object" variable="$descriptionFactory">
        <type full="phpDocumentor\Reflection\DocBlock\DescriptionFactory" namespace="phpDocumentor\Reflection\DocBlock" name="DescriptionFactory"/>
      </param>
      <param description="The Context is used to resolve Types and FQSENs, although optional" type="object" variable="$context">it is highly recommended to pass it. If you omit it then it is assumed that
                                   the DocBlock is in the global namespace and has no `use` statements.<type full="Context|null" namespace="" name="Context|null"/></param>
      <see value="Tag for the interface declaration of the `create` method."/>
      <see value="Tag::create() for more information on this method's workings."/>
      <return type="object">
        <type full="MyTag" namespace="" name="MyTag"/>
      </return>
    </docblock>
    <parameter name="body" byreference="false" type="{unknown}"/>
    <parameter name="descriptionFactory" byreference="false" type="{unknown}" default="" constant="null">
      <type full="phpDocumentor\Reflection\DocBlock\DescriptionFactory" namespace="phpDocumentor\Reflection\DocBlock" name="DescriptionFactory"/>
    </parameter>
    <parameter name="context" byreference="false" type="{unknown}" default="" constant="null">
      <type full="phpDocumentor\Reflection\Types\Context" namespace="phpDocumentor\Reflection\Types" name="Context"/>
    </parameter>
  </method>
  <method name="__toString" start="105" end="108" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a rendition of the original tag line.">This method is used to reconstitute a DocBlock into its original form by the <see xmlns="http://xml.phpdox.net/src" value="Serializer"/>. It should
feature all parts of the tag so that the serializer can put it back together.
</description>
      <return type="string"/>
    </docblock>
  </method>
</class>
