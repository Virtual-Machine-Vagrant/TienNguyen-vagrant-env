<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Psy\CodeCleaner\ValidClassNamePass" namespace="Psy\CodeCleaner" name="ValidClassNamePass" abstract="false" final="false" start="31" end="365">
  <file path="/home/web/example/src/freegame_developer/vendor/psy/psysh/src/Psy/CodeCleaner" file="ValidClassNamePass.php" realpath="/home/web/example/src/freegame_developer/vendor/psy/psysh/src/Psy/CodeCleaner/ValidClassNamePass.php" size="10794" time="2016-03-09T05:03:14+00:00" unixtime="1457499794" sha1="2861c370e9e0e356f8f2e2fc9c5c14ddcf20affb" relative="freegame_developer/vendor/psy/psysh/src/Psy/CodeCleaner/ValidClassNamePass.php"/>
  <docblock>
    <description compact="Validate that classes exist.">This pass throws a FatalErrorException rather than letting PHP run
headfirst into a real fatal error and die.</description>
  </docblock>
  <extends full="Psy\CodeCleaner\NamespaceAwarePass" namespace="Psy\CodeCleaner" name="NamespaceAwarePass"/>
  <constant type="string" name="CLASS_TYPE" value="'class'"/>
  <constant type="string" name="INTERFACE_TYPE" value="'interface'"/>
  <constant type="string" name="TRAIT_TYPE" value="'trait'"/>
  <member name="checkTraits" visibility="protected" static="false" line="37"/>
  <constructor name="__construct" start="39" end="42" abstract="false" final="false" static="false" visibility="public"/>
  <method name="enterNode" start="53" end="64" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validate class, interface and trait definitions.">Validate them upon entering the node, so that we know about their
presence and can validate constant fetches and static calls in class or
trait methods.</description>
      <param type="object">
        <type full="PhpParser\Node" namespace="PhpParser" name="Node"/>
      </param>
    </docblock>
    <parameter name="node" byreference="false" type="object">
      <type full="PhpParser\Node" namespace="PhpParser" name="Node"/>
    </parameter>
  </method>
  <method name="leaveNode" start="77" end="86" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validate `new` expressions, class constant fetches, and static calls."/>
      <throws description="if a class, interface or trait is referenced which does not exist." type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <throws description="if a class extends something that is not a class." type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <throws description="if a class implements something that is not an interface." type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <throws description="if an interface extends something that is not an interface." type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <throws description="if a class, interface or trait redefines an existing class, interface or trait name." type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <param type="object" variable="$node">
        <type full="PhpParser\Node" namespace="PhpParser" name="Node"/>
      </param>
    </docblock>
    <parameter name="node" byreference="false" type="object">
      <type full="PhpParser\Node" namespace="PhpParser" name="Node"/>
    </parameter>
  </method>
  <method name="validateClassStatement" start="93" end="100" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Validate a class definition statement."/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt\Class_" namespace="PhpParser\Node\Stmt" name="Class_"/>
      </param>
    </docblock>
    <parameter name="stmt" byreference="false" type="object">
      <type full="PhpParser\Node\Stmt\Class_" namespace="PhpParser\Node\Stmt" name="Class_"/>
    </parameter>
  </method>
  <method name="validateInterfaceStatement" start="107" end="111" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Validate an interface definition statement."/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt\Interface_" namespace="PhpParser\Node\Stmt" name="Interface_"/>
      </param>
    </docblock>
    <parameter name="stmt" byreference="false" type="object">
      <type full="PhpParser\Node\Stmt\Interface_" namespace="PhpParser\Node\Stmt" name="Interface_"/>
    </parameter>
  </method>
  <method name="validateTraitStatement" start="118" end="121" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Validate a trait definition statement."/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt\Trait_" namespace="PhpParser\Node\Stmt" name="Trait_"/>
      </param>
    </docblock>
    <parameter name="stmt" byreference="false" type="object">
      <type full="PhpParser\Node\Stmt\Trait_" namespace="PhpParser\Node\Stmt" name="Trait_"/>
    </parameter>
  </method>
  <method name="validateNewExpression" start="128" end="134" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Validate a `new` expression."/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Expr\New_" namespace="PhpParser\Node\Expr" name="New_"/>
      </param>
    </docblock>
    <parameter name="stmt" byreference="false" type="object">
      <type full="PhpParser\Node\Expr\New_" namespace="PhpParser\Node\Expr" name="New_"/>
    </parameter>
    <inline>
      <comment value="if class name is an expression or an anonymous class, give it a pass for now" line="130"/>
    </inline>
  </method>
  <method name="validateClassConstFetchExpression" start="141" end="153" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Validate a class constant fetch expression's class."/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Expr\ClassConstFetch" namespace="PhpParser\Node\Expr" name="ClassConstFetch"/>
      </param>
    </docblock>
    <parameter name="stmt" byreference="false" type="object">
      <type full="PhpParser\Node\Expr\ClassConstFetch" namespace="PhpParser\Node\Expr" name="ClassConstFetch"/>
    </parameter>
    <inline>
      <comment value="there is no need to check exists for ::class const for php 5.5 or newer" line="143"/>
      <comment value="if class name is an expression, give it a pass for now" line="149"/>
    </inline>
  </method>
  <method name="validateStaticCallExpression" start="160" end="166" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Validate a class constant fetch expression's class."/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Expr\StaticCall" namespace="PhpParser\Node\Expr" name="StaticCall"/>
      </param>
    </docblock>
    <parameter name="stmt" byreference="false" type="object">
      <type full="PhpParser\Node\Expr\StaticCall" namespace="PhpParser\Node\Expr" name="StaticCall"/>
    </parameter>
    <inline>
      <comment value="if class name is an expression, give it a pass for now" line="162"/>
    </inline>
  </method>
  <method name="ensureCanDefine" start="175" end="196" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Ensure that no class, interface or trait name collides with a new definition."/>
      <throws type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt" namespace="PhpParser\Node" name="Stmt"/>
      </param>
    </docblock>
    <parameter name="stmt" byreference="false" type="object">
      <type full="PhpParser\Node\Stmt" namespace="PhpParser\Node" name="Stmt"/>
    </parameter>
    <inline>
      <comment value="check for name collisions" line="179"/>
      <comment value="Store creation for the rest of this code snippet so we can find local" line="193"/>
      <comment value="issue too" line="194"/>
    </inline>
  </method>
  <method name="ensureClassExists" start="206" end="211" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Ensure that a referenced class exists."/>
      <throws type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <param type="string" variable="$name"/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt" namespace="PhpParser\Node" name="Stmt"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="stmt" byreference="false" type="{unknown}"/>
  </method>
  <method name="ensureClassOrInterfaceExists" start="221" end="226" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Ensure that a referenced class _or interface_ exists."/>
      <throws type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <param type="string" variable="$name"/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt" namespace="PhpParser\Node" name="Stmt"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="stmt" byreference="false" type="{unknown}"/>
  </method>
  <method name="ensureMethodExists" start="237" end="254" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Ensure that a statically called method exists."/>
      <throws type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <param type="string" variable="$class"/>
      <param type="string" variable="$name"/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt" namespace="PhpParser\Node" name="Stmt"/>
      </param>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="stmt" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="let's pretend all calls to self, parent and static are valid" line="241"/>
      <comment value="if method name is an expression, give it a pass for now" line="246"/>
    </inline>
  </method>
  <method name="ensureInterfacesExist" start="264" end="273" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Ensure that a referenced interface exists."/>
      <throws type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </throws>
      <param variable="$interfaces"/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt" namespace="PhpParser\Node" name="Stmt"/>
      </param>
    </docblock>
    <parameter name="interfaces" byreference="false" type="{unknown}"/>
    <parameter name="stmt" byreference="false" type="{unknown}"/>
  </method>
  <method name="getScopeType" start="282" end="291" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get a symbol type key for storing in the scope name cache."/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt" namespace="PhpParser\Node" name="Stmt"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="stmt" byreference="false" type="object">
      <type full="PhpParser\Node\Stmt" namespace="PhpParser\Node" name="Stmt"/>
    </parameter>
  </method>
  <method name="classExists" start="302" end="312" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Check whether a class exists, or has been defined in the current code snippet.">Gives `self`, `static` and `parent` a free pass.</description>
      <param type="string" variable="$name"/>
      <return type="object">
        <type full="Psy\CodeCleaner\bool" namespace="Psy\CodeCleaner" name="bool"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Give `self`, `static` and `parent` a pass. This will actually let" line="304"/>
      <comment value="some errors through, since we're not checking whether the keyword is" line="305"/>
      <comment value="being used in a class scope." line="306"/>
    </inline>
  </method>
  <method name="interfaceExists" start="321" end="324" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Check whether an interface exists, or has been defined in the current code snippet."/>
      <param type="string" variable="$name"/>
      <return type="object">
        <type full="Psy\CodeCleaner\bool" namespace="Psy\CodeCleaner" name="bool"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="traitExists" start="333" end="336" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Check whether a trait exists, or has been defined in the current code snippet."/>
      <param type="string" variable="$name"/>
      <return type="object">
        <type full="Psy\CodeCleaner\bool" namespace="Psy\CodeCleaner" name="bool"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="findInScope" start="345" end="351" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Find a symbol in the current code snippet scope."/>
      <param type="string" variable="$name"/>
      <return type="object">
        <type full="Psy\CodeCleaner\string|null" namespace="Psy\CodeCleaner" name="string|null"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="createError" start="361" end="364" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Error creation factory."/>
      <param type="string" variable="$msg"/>
      <param type="object" variable="$stmt">
        <type full="PhpParser\Node\Stmt" namespace="PhpParser\Node" name="Stmt"/>
      </param>
      <return type="object">
        <type full="Psy\Exception\FatalErrorException" namespace="Psy\Exception" name="FatalErrorException"/>
      </return>
    </docblock>
    <parameter name="msg" byreference="false" type="{unknown}"/>
    <parameter name="stmt" byreference="false" type="{unknown}"/>
  </method>
</class>
