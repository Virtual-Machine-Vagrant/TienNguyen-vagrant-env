<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="phpDocumentor\Reflection\DocBlock\TagFactory" namespace="phpDocumentor\Reflection\DocBlock" name="TagFactory" abstract="false" final="false" start="17" end="93">
  <file path="/home/web/example/src/freegame_developer/vendor/phpdocumentor/reflection-docblock/src/DocBlock" file="TagFactory.php" realpath="/home/web/example/src/freegame_developer/vendor/phpdocumentor/reflection-docblock/src/DocBlock/TagFactory.php" size="3847" time="2016-09-30T07:12:33+00:00" unixtime="1475219553" sha1="8938cbd7b6e53b11cfc0889fd3668da89166d21f" relative="freegame_developer/vendor/phpdocumentor/reflection-docblock/src/DocBlock/TagFactory.php"/>
  <method name="addParameter" start="42" end="42" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a parameter to the service locator that can be injected in a tag's factory method.">When calling a tag's "create" method we always check the signature for dependencies to inject. One way is to
typehint a parameter in the signature so that we can use that interface or class name to inject a dependency
(see <see xmlns="http://xml.phpdox.net/src" value="addService()"/> for more information on that).
Another way is to check the name of the argument against the names in the Service Locator. With this method
you can add a variable that will be inserted when a tag's create method is not typehinted and has a matching
name.
Be aware that there are two reserved names:
- name, representing the name of the tag.
- body, representing the complete body of the tag.
These parameters are injected at the last moment and will override any existing parameter with those names.
</description>
      <param type="string" variable="$name"/>
      <param type="mixed" variable="$value"/>
      <return type="object">
        <type full="phpDocumentor\Reflection\DocBlock\void" namespace="phpDocumentor\Reflection\DocBlock" name="void"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="addService" start="58" end="58" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Registers a service with the Service Locator using the FQCN of the class or the alias, if provided.">When calling a tag's "create" method we always check the signature for dependencies to inject. If a parameter
has a typehint then the ServiceLocator is queried to see if a Service is registered for that typehint.

Because interfaces are regularly used as type-hints this method provides an alias parameter; if the FQCN of the
interface is passed as alias then every time that interface is requested the provided service will be returned.</description>
      <param type="object" variable="$service"/>
      <param type="string" variable="$alias"/>
      <return type="object">
        <type full="phpDocumentor\Reflection\DocBlock\void" namespace="phpDocumentor\Reflection\DocBlock" name="void"/>
      </return>
    </docblock>
    <parameter name="service" byreference="false" type="{unknown}"/>
  </method>
  <method name="create" start="70" end="70" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Factory method responsible for instantiating the correct sub type."/>
      <param description="The text for this tag, including description." type="string" variable="$tagLine"/>
      <param type="object" variable="$context">
        <type full="phpDocumentor\Reflection\Types\Context" namespace="phpDocumentor\Reflection\Types" name="Context"/>
      </param>
      <throws description="if an invalid tag line was presented." type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <return description="A new tag object." type="object">
        <type full="phpDocumentor\Reflection\DocBlock\Tag" namespace="phpDocumentor\Reflection\DocBlock" name="Tag"/>
      </return>
    </docblock>
    <parameter name="tagLine" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="{unknown}" default="" constant="null">
      <type full="phpDocumentor\Reflection\Types\Context" namespace="phpDocumentor\Reflection\Types" name="Context"/>
    </parameter>
  </method>
  <method name="registerTagHandler" start="92" end="92" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Registers a handler for tags.">If you want to use your own tags then you can use this method to instruct the TagFactory to register the name
of a tag with the FQCN of a 'Tag Handler'. The Tag handler should implement the <see xmlns="http://xml.phpdox.net/src" value="Tag"/> interface (and thus
the create method).
</description>
      <param description="Name of tag to register a handler for. When registering a namespaced tag, the full" type="string" variable="$tagName">name, along with a prefixing slash MUST be provided.</param>
      <param description="FQCN of handler." type="string" variable="$handler"/>
      <throws description="if the tag name is not a string" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if the tag name is namespaced (contains backslashes) but does not start with" type="object">a backslash<type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/></throws>
      <throws description="if the handler is not a string" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if the handler is not an existing class" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <throws description="if the handler does not implement the {@see Tag} interface" type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <return type="object">
        <type full="phpDocumentor\Reflection\DocBlock\void" namespace="phpDocumentor\Reflection\DocBlock" name="void"/>
      </return>
    </docblock>
    <parameter name="tagName" byreference="false" type="{unknown}"/>
    <parameter name="handler" byreference="false" type="{unknown}"/>
  </method>
</interface>
